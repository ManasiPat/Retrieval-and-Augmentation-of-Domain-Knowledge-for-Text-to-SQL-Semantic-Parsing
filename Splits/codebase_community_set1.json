[
    {
        "db_id": "codebase_community",
        "question": "Please list the display names of all the users whose accounts were created in the year 2014.",
        "evidence": "account created in the year 2014 refers to year(CreationDate) = 2014",
        "SQL": "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2014'",
        "question_toks": [
            "Please",
            "list",
            "the",
            "display",
            "names",
            "of",
            "all",
            "the",
            "users",
            "whose",
            "accounts",
            "were",
            "created",
            "in",
            "the",
            "year",
            "2014",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "DisplayName",
            "FROM",
            "users",
            "WHERE",
            "STRFTIME",
            "(",
            "'",
            "%",
            "Y",
            "'",
            ",",
            "CreationDate",
            ")",
            "=",
            "'2014",
            "'"
        ],
        "evidence_toks": [
            "account",
            "created",
            "in",
            "the",
            "year",
            "2014",
            "refers",
            "to",
            "year",
            "(",
            "CreationDate",
            ")",
            "=",
            "2014"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "How many users last accessed the website after 2014/9/1?",
        "evidence": "last accessed after 2014/9/1 refers to LastAccessDate > '2014-09-01 00:00:00'",
        "SQL": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'",
        "question_toks": [
            "How",
            "many",
            "users",
            "last",
            "accessed",
            "the",
            "website",
            "after",
            "2014/9/1",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "Id",
            ")",
            "FROM",
            "users",
            "WHERE",
            "date",
            "(",
            "LastAccessDate",
            ")",
            ">",
            "'2014-09-01",
            "'"
        ],
        "evidence_toks": [
            "last",
            "accessed",
            "after",
            "2014/9/1",
            "refers",
            "to",
            "LastAccessDate",
            ">",
            "'2014-09-01",
            "00:00:00",
            "'"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "What is the display name of the user who has the most number of views?",
        "evidence": "user who has the most number of view refers to Max(Views)",
        "SQL": "SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
        "question_toks": [
            "What",
            "is",
            "the",
            "display",
            "name",
            "of",
            "the",
            "user",
            "who",
            "has",
            "the",
            "most",
            "number",
            "of",
            "views",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "DisplayName",
            "FROM",
            "users",
            "WHERE",
            "Views",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Views",
            ")",
            "FROM",
            "users",
            ")"
        ],
        "evidence_toks": [
            "user",
            "who",
            "has",
            "the",
            "most",
            "number",
            "of",
            "view",
            "refers",
            "to",
            "Max",
            "(",
            "Views",
            ")"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "How many posts does the user csgillespie own?",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "SQL": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "question_toks": [
            "How",
            "many",
            "posts",
            "does",
            "the",
            "user",
            "csgillespie",
            "own",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "T1.id",
            ")",
            "FROM",
            "posts",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "users",
            "AS",
            "T2",
            "ON",
            "T1.OwnerUserId",
            "=",
            "T2.Id",
            "WHERE",
            "T2.DisplayName",
            "=",
            "'csgillespie",
            "'"
        ],
        "evidence_toks": [
            "``",
            "csgillespie",
            "''",
            "is",
            "the",
            "DisplayName",
            "of",
            "user"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Please list the titles of the posts owned by the user csgillespie?",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "question_toks": [
            "Please",
            "list",
            "the",
            "titles",
            "of",
            "the",
            "posts",
            "owned",
            "by",
            "the",
            "user",
            "csgillespie",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "T1.Title",
            "FROM",
            "posts",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "users",
            "AS",
            "T2",
            "ON",
            "T1.OwnerUserId",
            "=",
            "T2.Id",
            "WHERE",
            "T2.DisplayName",
            "=",
            "'csgillespie",
            "'"
        ],
        "evidence_toks": [
            "``",
            "csgillespie",
            "''",
            "is",
            "the",
            "DisplayName",
            "of",
            "user"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Who is the owner of the post \"Eliciting priors from experts\"?",
        "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors FROM experts'",
        "question_toks": [
            "Who",
            "is",
            "the",
            "owner",
            "of",
            "the",
            "post",
            "``",
            "Eliciting",
            "priors",
            "from",
            "experts",
            "''",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "T2.DisplayName",
            "FROM",
            "posts",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "users",
            "AS",
            "T2",
            "ON",
            "T1.OwnerUserId",
            "=",
            "T2.Id",
            "WHERE",
            "T1.Title",
            "=",
            "'Eliciting",
            "priors",
            "FROM",
            "experts",
            "'"
        ],
        "evidence_toks": [
            "``",
            "Eliciting",
            "priors",
            "from",
            "experts",
            "''",
            "is",
            "the",
            "Title",
            "of",
            "post",
            ";",
            "owner",
            "refers",
            "to",
            "DisplayName"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
        "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
        "question_toks": [
            "What",
            "is",
            "the",
            "title",
            "of",
            "the",
            "post",
            "that",
            "is",
            "owned",
            "by",
            "csgillespie",
            "and",
            "has",
            "the",
            "highest",
            "popularity",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "T1.Title",
            "FROM",
            "posts",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "users",
            "AS",
            "T2",
            "ON",
            "T1.OwnerUserId",
            "=",
            "T2.Id",
            "WHERE",
            "T2.DisplayName",
            "=",
            "'csgillespie",
            "'",
            "ORDER",
            "BY",
            "T1.ViewCount",
            "DESC",
            "LIMIT",
            "1"
        ],
        "evidence_toks": [
            "``",
            "csgillespie",
            "''",
            "is",
            "the",
            "DisplayName",
            "of",
            "user",
            ";",
            "highest",
            "popularity",
            "refers",
            "to",
            "Max",
            "(",
            "ViewCount",
            ")"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "What is the total number of comments of all the posts owned by csgillespie?",
        "evidence": "\"csgillespie\" is the DisplayName of user; total number of comments refers to Sum(CommentCount)",
        "SQL": "SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "number",
            "of",
            "comments",
            "of",
            "all",
            "the",
            "posts",
            "owned",
            "by",
            "csgillespie",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "SUM",
            "(",
            "T1.CommentCount",
            ")",
            "FROM",
            "posts",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "users",
            "AS",
            "T2",
            "ON",
            "T1.OwnerUserId",
            "=",
            "T2.Id",
            "WHERE",
            "T2.DisplayName",
            "=",
            "'csgillespie",
            "'"
        ],
        "evidence_toks": [
            "``",
            "csgillespie",
            "''",
            "is",
            "the",
            "DisplayName",
            "of",
            "user",
            ";",
            "total",
            "number",
            "of",
            "comments",
            "refers",
            "to",
            "Sum",
            "(",
            "CommentCount",
            ")"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
        "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does NOT mean causation'",
        "question_toks": [
            "What",
            "is",
            "the",
            "display",
            "name",
            "of",
            "the",
            "user",
            "who",
            "last",
            "edited",
            "the",
            "post",
            "``",
            "Examples",
            "for",
            "teaching",
            ":",
            "Correlation",
            "does",
            "not",
            "mean",
            "causation",
            "''",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "T2.DisplayName",
            "FROM",
            "posts",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "users",
            "AS",
            "T2",
            "ON",
            "T1.OwnerUserId",
            "=",
            "T2.Id",
            "WHERE",
            "T1.Title",
            "=",
            "'Examples",
            "for",
            "teaching",
            ":",
            "Correlation",
            "does",
            "NOT",
            "mean",
            "causation",
            "'"
        ],
        "evidence_toks": [
            "``",
            "Examples",
            "for",
            "teaching",
            ":",
            "Correlation",
            "does",
            "not",
            "mean",
            "causation",
            "''",
            "is",
            "the",
            "Title",
            "of",
            "post",
            ";",
            "user",
            "who",
            "last",
            "edited",
            "refers",
            "to",
            "LastEditorUserId"
        ],
        "difficulty": "moderate"
    },
    {
        "db_id": "codebase_community",
        "question": "How many badges has the user csgillespie obtained?",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "SQL": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "question_toks": [
            "How",
            "many",
            "badges",
            "has",
            "the",
            "user",
            "csgillespie",
            "obtained",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "T1.Id",
            ")",
            "FROM",
            "badges",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "users",
            "AS",
            "T2",
            "ON",
            "T1.UserId",
            "=",
            "T2.Id",
            "WHERE",
            "T2.DisplayName",
            "=",
            "'csgillespie",
            "'"
        ],
        "evidence_toks": [
            "``",
            "csgillespie",
            "''",
            "is",
            "the",
            "DisplayName",
            "of",
            "user"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "What is the display name of the user who has obtained the most number of badges?",
        "evidence": "who obtained the most number of badges refers to UserID with Max(Count(Id))",
        "SQL": "SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1",
        "question_toks": [
            "What",
            "is",
            "the",
            "display",
            "name",
            "of",
            "the",
            "user",
            "who",
            "has",
            "obtained",
            "the",
            "most",
            "number",
            "of",
            "badges",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "T2.DisplayName",
            "FROM",
            "badges",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "users",
            "AS",
            "T2",
            "ON",
            "T1.UserId",
            "=",
            "T2.Id",
            "GROUP",
            "BY",
            "T2.DisplayName",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "T1.Id",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "evidence_toks": [
            "who",
            "obtained",
            "the",
            "most",
            "number",
            "of",
            "badges",
            "refers",
            "to",
            "UserID",
            "with",
            "Max",
            "(",
            "Count",
            "(",
            "Id",
            ")",
            ")"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "What is the average score of the posts owned by the user csgillespie?",
        "evidence": "\"csgillespie\" is the DisplayName of user; average score refers to AVG(Score)",
        "SQL": "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "score",
            "of",
            "the",
            "posts",
            "owned",
            "by",
            "the",
            "user",
            "csgillespie",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "AVG",
            "(",
            "T1.Score",
            ")",
            "FROM",
            "posts",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "users",
            "AS",
            "T2",
            "ON",
            "T1.OwnerUserId",
            "=",
            "T2.Id",
            "WHERE",
            "T2.DisplayName",
            "=",
            "'csgillespie",
            "'"
        ],
        "evidence_toks": [
            "``",
            "csgillespie",
            "''",
            "is",
            "the",
            "DisplayName",
            "of",
            "user",
            ";",
            "average",
            "score",
            "refers",
            "to",
            "AVG",
            "(",
            "Score",
            ")"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "What is the average number of badges obtained by a user with over 200 views?",
        "evidence": "user with over 200 views refers to Views > 200; average number of badges = Divide (Count(Id), Count(DisplayName))",
        "SQL": "SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T2.DisplayName) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Views > 200",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "number",
            "of",
            "badges",
            "obtained",
            "by",
            "a",
            "user",
            "with",
            "over",
            "200",
            "views",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "CAST",
            "(",
            "COUNT",
            "(",
            "T1.Id",
            ")",
            "AS",
            "REAL",
            ")",
            "/",
            "COUNT",
            "(",
            "DISTINCT",
            "T2.DisplayName",
            ")",
            "FROM",
            "badges",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "users",
            "AS",
            "T2",
            "ON",
            "T1.UserId",
            "=",
            "T2.Id",
            "WHERE",
            "T2.Views",
            ">",
            "200"
        ],
        "evidence_toks": [
            "user",
            "with",
            "over",
            "200",
            "views",
            "refers",
            "to",
            "Views",
            ">",
            "200",
            ";",
            "average",
            "number",
            "of",
            "badges",
            "=",
            "Divide",
            "(",
            "Count",
            "(",
            "Id",
            ")",
            ",",
            "Count",
            "(",
            "DisplayName",
            ")",
            ")"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "How many votes did the user No.58 take on 2010/7/19?",
        "evidence": "user no. 58 refers to UserId = 58; on 2010/7/19 refers to CreationDate = '2010-07-19'",
        "SQL": "SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'",
        "question_toks": [
            "How",
            "many",
            "votes",
            "did",
            "the",
            "user",
            "No.58",
            "take",
            "on",
            "2010/7/19",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "Id",
            ")",
            "FROM",
            "votes",
            "WHERE",
            "UserId",
            "=",
            "58",
            "AND",
            "CreationDate",
            "=",
            "'2010-07-19",
            "'"
        ],
        "evidence_toks": [
            "user",
            "no",
            ".",
            "58",
            "refers",
            "to",
            "UserId",
            "=",
            "58",
            ";",
            "on",
            "2010/7/19",
            "refers",
            "to",
            "CreationDate",
            "=",
            "'2010-07-19",
            "'"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Give the number of \"Revival\" badges.",
        "evidence": "number refers to Id; 'Revival' is the Name of badge",
        "SQL": "SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'",
        "question_toks": [
            "Give",
            "the",
            "number",
            "of",
            "``",
            "Revival",
            "''",
            "badges",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "Id",
            ")",
            "FROM",
            "badges",
            "WHERE",
            "Name",
            "=",
            "'Revival",
            "'"
        ],
        "evidence_toks": [
            "number",
            "refers",
            "to",
            "Id",
            ";",
            "'Revival",
            "'",
            "is",
            "the",
            "Name",
            "of",
            "badge"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "What is the title for the post which got the highest score comment?",
        "evidence": "highest score comment refers to Max(comments.Score)",
        "SQL": "SELECT Title FROM posts WHERE Id = ( SELECT PostId FROM comments ORDER BY Score DESC LIMIT 1 )",
        "question_toks": [
            "What",
            "is",
            "the",
            "title",
            "for",
            "the",
            "post",
            "which",
            "got",
            "the",
            "highest",
            "score",
            "comment",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "Title",
            "FROM",
            "posts",
            "WHERE",
            "Id",
            "=",
            "(",
            "SELECT",
            "PostId",
            "FROM",
            "comments",
            "ORDER",
            "BY",
            "Score",
            "DESC",
            "LIMIT",
            "1",
            ")"
        ],
        "evidence_toks": [
            "highest",
            "score",
            "comment",
            "refers",
            "to",
            "Max",
            "(",
            "comments.Score",
            ")"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "For the post which got 1910 view counts, how many comments does it get?",
        "evidence": "",
        "SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910",
        "question_toks": [
            "For",
            "the",
            "post",
            "which",
            "got",
            "1910",
            "view",
            "counts",
            ",",
            "how",
            "many",
            "comments",
            "does",
            "it",
            "get",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "T1.Id",
            ")",
            "FROM",
            "posts",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "comments",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.PostId",
            "WHERE",
            "T1.ViewCount",
            "=",
            "1910"
        ],
        "evidence_toks": [],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?",
        "evidence": "user no. 3025 refers to UserId = '3025'; comment at 20:29:39 on 2014/4/23 refers to CreationDate = '2014/4/23 20:29:39'",
        "SQL": "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39' AND T2.UserId = 3025",
        "question_toks": [
            "User",
            "No.3025",
            "gave",
            "a",
            "comment",
            "at",
            "20:29:39",
            "on",
            "2014/4/23",
            "to",
            "a",
            "post",
            ",",
            "how",
            "many",
            "favorite",
            "counts",
            "did",
            "that",
            "post",
            "get",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "T1.FavoriteCount",
            "FROM",
            "posts",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "comments",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.PostId",
            "WHERE",
            "T2.CreationDate",
            "=",
            "'2014-04-23",
            "20:29:39",
            "'",
            "AND",
            "T2.UserId",
            "=",
            "3025"
        ],
        "evidence_toks": [
            "user",
            "no",
            ".",
            "3025",
            "refers",
            "to",
            "UserId",
            "=",
            "'3025",
            "'",
            ";",
            "comment",
            "at",
            "20:29:39",
            "on",
            "2014/4/23",
            "refers",
            "to",
            "CreationDate",
            "=",
            "'2014/4/23",
            "20:29:39",
            "'"
        ],
        "difficulty": "moderate"
    },
    {
        "db_id": "codebase_community",
        "question": "For the owner user of post No. 65041, what is his/her reputation points?",
        "evidence": "post no. 65041 refers to Id = '65041'; reputation point refers to Reputation",
        "SQL": "SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041",
        "question_toks": [
            "For",
            "the",
            "owner",
            "user",
            "of",
            "post",
            "No",
            ".",
            "65041",
            ",",
            "what",
            "is",
            "his/her",
            "reputation",
            "points",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "T1.Reputation",
            "FROM",
            "users",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "posts",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.OwnerUserId",
            "WHERE",
            "T2.Id",
            "=",
            "65041"
        ],
        "evidence_toks": [
            "post",
            "no",
            ".",
            "65041",
            "refers",
            "to",
            "Id",
            "=",
            "'65041",
            "'",
            ";",
            "reputation",
            "point",
            "refers",
            "to",
            "Reputation"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Give the number of votes for the post about data visualization.",
        "evidence": "About data visualization is the Title that contains 'data visualization';",
        "SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data visualization%'",
        "question_toks": [
            "Give",
            "the",
            "number",
            "of",
            "votes",
            "for",
            "the",
            "post",
            "about",
            "data",
            "visualization",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "T1.Id",
            ")",
            "FROM",
            "posts",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "votes",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.PostId",
            "WHERE",
            "T1.Title",
            "LIKE",
            "'",
            "%",
            "data",
            "visualization",
            "%",
            "'"
        ],
        "evidence_toks": [
            "About",
            "data",
            "visualization",
            "is",
            "the",
            "Title",
            "that",
            "contains",
            "'data",
            "visualization",
            "'",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
        "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
        "question_toks": [
            "How",
            "many",
            "views",
            "did",
            "the",
            "post",
            "titled",
            "'Integration",
            "of",
            "Weka",
            "and/or",
            "RapidMiner",
            "into",
            "Informatica",
            "PowerCenter/Developer",
            "'",
            "get",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "ViewCount",
            "FROM",
            "posts",
            "WHERE",
            "Title",
            "=",
            "'Integration",
            "of",
            "Weka",
            "and/or",
            "RapidMiner",
            "into",
            "Informatica",
            "PowerCenter/Developer",
            "'"
        ],
        "evidence_toks": [
            "``",
            "Integration",
            "of",
            "Weka",
            "and/or",
            "RapidMiner",
            "into",
            "Informatica",
            "PowerCenter/Developer",
            "''",
            "is",
            "the",
            "Title",
            "of",
            "post",
            ";",
            "views",
            "refers",
            "to",
            "ViewCount"
        ],
        "difficulty": "moderate"
    },
    {
        "db_id": "codebase_community",
        "question": "Write all comments made on the post titled 'How does gentle boosting differ from AdaBoost?'",
        "evidence": "\"How does gentle boosing differ from AdaBoost?\" is the Title of post; comments refers to Text",
        "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How does gentle boosting differ FROM AdaBoost?'",
        "question_toks": [
            "Write",
            "all",
            "comments",
            "made",
            "on",
            "the",
            "post",
            "titled",
            "'How",
            "does",
            "gentle",
            "boosting",
            "differ",
            "from",
            "AdaBoost",
            "?",
            "'"
        ],
        "SQL_toks": [
            "SELECT",
            "T1.Text",
            "FROM",
            "comments",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "posts",
            "AS",
            "T2",
            "ON",
            "T1.PostId",
            "=",
            "T2.Id",
            "WHERE",
            "T2.Title",
            "=",
            "'How",
            "does",
            "gentle",
            "boosting",
            "differ",
            "FROM",
            "AdaBoost",
            "?",
            "'"
        ],
        "evidence_toks": [
            "``",
            "How",
            "does",
            "gentle",
            "boosing",
            "differ",
            "from",
            "AdaBoost",
            "?",
            "''",
            "is",
            "the",
            "Title",
            "of",
            "post",
            ";",
            "comments",
            "refers",
            "to",
            "Text"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Name 10 users with the badge name 'Necromancer.'",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
        "question_toks": [
            "Name",
            "10",
            "users",
            "with",
            "the",
            "badge",
            "name",
            "'Necromancer",
            ".",
            "'"
        ],
        "SQL_toks": [
            "SELECT",
            "T1.DisplayName",
            "FROM",
            "users",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "badges",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.UserId",
            "WHERE",
            "T2.Name",
            "=",
            "'Necromancer",
            "'",
            "LIMIT",
            "10"
        ],
        "evidence_toks": [
            "``",
            "Necromancer",
            "''",
            "is",
            "the",
            "Name",
            "of",
            "badge",
            ";",
            "users",
            "refers",
            "to",
            "DisplayName"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "What is the total score of the posts edited by Yevgeny and include the user's website URL.",
        "evidence": "\"Yevgeny\" is the DisplayName; edited refers to LastEditorUserId",
        "SQL": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.WebsiteUrl",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "score",
            "of",
            "the",
            "posts",
            "edited",
            "by",
            "Yevgeny",
            "and",
            "include",
            "the",
            "user",
            "'s",
            "website",
            "URL",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "SUM",
            "(",
            "T1.Score",
            ")",
            ",",
            "T2.WebsiteUrl",
            "FROM",
            "posts",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "users",
            "AS",
            "T2",
            "ON",
            "T1.OwnerUserId",
            "=",
            "T2.Id",
            "WHERE",
            "T2.DisplayName",
            "=",
            "'Yevgeny",
            "'",
            "GROUP",
            "BY",
            "T2.WebsiteUrl"
        ],
        "evidence_toks": [
            "``",
            "Yevgeny",
            "''",
            "is",
            "the",
            "DisplayName",
            ";",
            "edited",
            "refers",
            "to",
            "LastEditorUserId"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "How much is the total bounty amount of the post titled about 'data'",
        "evidence": "About data means the title contains 'data'; total bounty Amount refers to Sum(BountyAmount)",
        "SQL": "SELECT SUM(T2.BountyAmount) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%'",
        "question_toks": [
            "How",
            "much",
            "is",
            "the",
            "total",
            "bounty",
            "amount",
            "of",
            "the",
            "post",
            "titled",
            "about",
            "'data",
            "'"
        ],
        "SQL_toks": [
            "SELECT",
            "SUM",
            "(",
            "T2.BountyAmount",
            ")",
            "FROM",
            "posts",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "votes",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.PostId",
            "WHERE",
            "T1.Title",
            "LIKE",
            "'",
            "%",
            "data",
            "%",
            "'"
        ],
        "evidence_toks": [
            "About",
            "data",
            "means",
            "the",
            "title",
            "contains",
            "'data",
            "'",
            ";",
            "total",
            "bounty",
            "Amount",
            "refers",
            "to",
            "Sum",
            "(",
            "BountyAmount",
            ")"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Which user added a bounty amount of 50 to the post titled 'Variance of a difference in marginal proportions in a three-way contingency table?'",
        "evidence": "\"Variance of a difference in marginal proportions in a three-way contingency table\" is the Title of post; bounty amount of 50 refers to BountyAmount = 50; user refers to DisplayName",
        "SQL": "SELECT T3.DisplayName FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title = 'Variance of a difference in marginal proportions in a three-way contingency table'",
        "question_toks": [
            "Which",
            "user",
            "added",
            "a",
            "bounty",
            "amount",
            "of",
            "50",
            "to",
            "the",
            "post",
            "titled",
            "'Variance",
            "of",
            "a",
            "difference",
            "in",
            "marginal",
            "proportions",
            "in",
            "a",
            "three-way",
            "contingency",
            "table",
            "?",
            "'"
        ],
        "SQL_toks": [
            "SELECT",
            "T3.DisplayName",
            "FROM",
            "posts",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "votes",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.PostId",
            "INNER",
            "JOIN",
            "users",
            "AS",
            "T3",
            "ON",
            "T3.Id",
            "=",
            "T2.UserId",
            "WHERE",
            "T2.BountyAmount",
            "=",
            "50",
            "AND",
            "T1.Title",
            "=",
            "'Variance",
            "of",
            "a",
            "difference",
            "in",
            "marginal",
            "proportions",
            "in",
            "a",
            "three-way",
            "contingency",
            "table",
            "'"
        ],
        "evidence_toks": [
            "``",
            "Variance",
            "of",
            "a",
            "difference",
            "in",
            "marginal",
            "proportions",
            "in",
            "a",
            "three-way",
            "contingency",
            "table",
            "''",
            "is",
            "the",
            "Title",
            "of",
            "post",
            ";",
            "bounty",
            "amount",
            "of",
            "50",
            "refers",
            "to",
            "BountyAmount",
            "=",
            "50",
            ";",
            "user",
            "refers",
            "to",
            "DisplayName"
        ],
        "difficulty": "challenging"
    },
    {
        "db_id": "codebase_community",
        "question": "Give the total number of comments posted by user ID 13.",
        "evidence": "",
        "SQL": "SELECT COUNT(Id) FROM comments WHERE UserId = 13",
        "question_toks": [
            "Give",
            "the",
            "total",
            "number",
            "of",
            "comments",
            "posted",
            "by",
            "user",
            "ID",
            "13",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "Id",
            ")",
            "FROM",
            "comments",
            "WHERE",
            "UserId",
            "=",
            "13"
        ],
        "evidence_toks": [],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "How many users are awarded with supporter badge during year 2011?",
        "evidence": "\"Supporter\" is the Name of badge; in year 2011 refers to year(Date) = 2011",
        "SQL": "SELECT COUNT(Id) FROM badges WHERE STRFTIME('%Y', Date) = '2011' AND Name = 'Supporter'",
        "question_toks": [
            "How",
            "many",
            "users",
            "are",
            "awarded",
            "with",
            "supporter",
            "badge",
            "during",
            "year",
            "2011",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "Id",
            ")",
            "FROM",
            "badges",
            "WHERE",
            "STRFTIME",
            "(",
            "'",
            "%",
            "Y",
            "'",
            ",",
            "Date",
            ")",
            "=",
            "'2011",
            "'",
            "AND",
            "Name",
            "=",
            "'Supporter",
            "'"
        ],
        "evidence_toks": [
            "``",
            "Supporter",
            "''",
            "is",
            "the",
            "Name",
            "of",
            "badge",
            ";",
            "in",
            "year",
            "2011",
            "refers",
            "to",
            "year",
            "(",
            "Date",
            ")",
            "=",
            "2011"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "How many users are awarded with more than 5 badges?",
        "evidence": "more than 5 badges refers to Count (Name) > 5; user refers to UserId",
        "SQL": "SELECT UserId FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5",
        "question_toks": [
            "How",
            "many",
            "users",
            "are",
            "awarded",
            "with",
            "more",
            "than",
            "5",
            "badges",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "UserId",
            "FROM",
            "(",
            "SELECT",
            "UserId",
            ",",
            "COUNT",
            "(",
            "Name",
            ")",
            "AS",
            "num",
            "FROM",
            "badges",
            "GROUP",
            "BY",
            "UserId",
            ")",
            "T",
            "WHERE",
            "T.num",
            ">",
            "5"
        ],
        "evidence_toks": [
            "more",
            "than",
            "5",
            "badges",
            "refers",
            "to",
            "Count",
            "(",
            "Name",
            ")",
            ">",
            "5",
            ";",
            "user",
            "refers",
            "to",
            "UserId"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Which users have posted the most comments. List out the user's badge?",
        "evidence": "user with the most comments refers to UserId where Max(Count(Id)",
        "SQL": "SELECT Name FROM badges AS T1 INNER JOIN comments AS T2 ON T1.UserId = t2.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.UserId) DESC LIMIT 1",
        "question_toks": [
            "Which",
            "users",
            "have",
            "posted",
            "the",
            "most",
            "comments",
            ".",
            "List",
            "out",
            "the",
            "user",
            "'s",
            "badge",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "Name",
            "FROM",
            "badges",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "comments",
            "AS",
            "T2",
            "ON",
            "T1.UserId",
            "=",
            "t2.UserId",
            "GROUP",
            "BY",
            "T2.UserId",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "T2.UserId",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "evidence_toks": [
            "user",
            "with",
            "the",
            "most",
            "comments",
            "refers",
            "to",
            "UserId",
            "where",
            "Max",
            "(",
            "Count",
            "(",
            "Id",
            ")"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "What are the post history type IDs for post ID 3720 and how many users have commented on the post?",
        "evidence": "",
        "SQL": "SELECT T1.PostHistoryTypeId, COUNT(T2.UserId) FROM postHistory AS T1 INNER JOIN comments AS T2 ON T1.UserId = T2.UserId WHERE T1.PostId = 3720",
        "question_toks": [
            "What",
            "are",
            "the",
            "post",
            "history",
            "type",
            "IDs",
            "for",
            "post",
            "ID",
            "3720",
            "and",
            "how",
            "many",
            "users",
            "have",
            "commented",
            "on",
            "the",
            "post",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "T1.PostHistoryTypeId",
            ",",
            "COUNT",
            "(",
            "T2.UserId",
            ")",
            "FROM",
            "postHistory",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "comments",
            "AS",
            "T2",
            "ON",
            "T1.UserId",
            "=",
            "T2.UserId",
            "WHERE",
            "T1.PostId",
            "=",
            "3720"
        ],
        "evidence_toks": [],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "List out all post that are related to post ID 61217 and what is the popularity of this post?",
        "evidence": "post related refers to RelatedPostId; popularity refers to ViewCount",
        "SQL": "SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217",
        "question_toks": [
            "List",
            "out",
            "all",
            "post",
            "that",
            "are",
            "related",
            "to",
            "post",
            "ID",
            "61217",
            "and",
            "what",
            "is",
            "the",
            "popularity",
            "of",
            "this",
            "post",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "T1.ViewCount",
            "FROM",
            "posts",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "postLinks",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.PostId",
            "WHERE",
            "T2.PostId",
            "=",
            "61217"
        ],
        "evidence_toks": [
            "post",
            "related",
            "refers",
            "to",
            "RelatedPostId",
            ";",
            "popularity",
            "refers",
            "to",
            "ViewCount"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "List out all post ID with score more than 60 and list out all the user ID that created these post.",
        "evidence": "score more than 60 refers to Score > 60",
        "SQL": "SELECT PostId, UserId FROM postHistory WHERE PostId IN ( SELECT Id FROM posts WHERE Score > 60 )",
        "question_toks": [
            "List",
            "out",
            "all",
            "post",
            "ID",
            "with",
            "score",
            "more",
            "than",
            "60",
            "and",
            "list",
            "out",
            "all",
            "the",
            "user",
            "ID",
            "that",
            "created",
            "these",
            "post",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "PostId",
            ",",
            "UserId",
            "FROM",
            "postHistory",
            "WHERE",
            "PostId",
            "IN",
            "(",
            "SELECT",
            "Id",
            "FROM",
            "posts",
            "WHERE",
            "Score",
            ">",
            "60",
            ")"
        ],
        "evidence_toks": [
            "score",
            "more",
            "than",
            "60",
            "refers",
            "to",
            "Score",
            ">",
            "60"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "What is the sum of favourite count gained by user ID 686 in 2011?",
        "evidence": "in 2011 refers to year (CreatinDate) = 2011",
        "SQL": "SELECT SUM(DISTINCT FavoriteCount) FROM posts WHERE Id IN ( SELECT PostId FROM postHistory WHERE UserId = 686 AND STRFTIME('%Y', CreationDate) = '2011' )",
        "question_toks": [
            "What",
            "is",
            "the",
            "sum",
            "of",
            "favourite",
            "count",
            "gained",
            "by",
            "user",
            "ID",
            "686",
            "in",
            "2011",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "SUM",
            "(",
            "DISTINCT",
            "FavoriteCount",
            ")",
            "FROM",
            "posts",
            "WHERE",
            "Id",
            "IN",
            "(",
            "SELECT",
            "PostId",
            "FROM",
            "postHistory",
            "WHERE",
            "UserId",
            "=",
            "686",
            "AND",
            "STRFTIME",
            "(",
            "'",
            "%",
            "Y",
            "'",
            ",",
            "CreationDate",
            ")",
            "=",
            "'2011",
            "'",
            ")"
        ],
        "evidence_toks": [
            "in",
            "2011",
            "refers",
            "to",
            "year",
            "(",
            "CreatinDate",
            ")",
            "=",
            "2011"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "How many users obtained the \"Announcer\" badge?",
        "evidence": "\"Announcer\" is the Name of badge; user refers to UserId",
        "SQL": "SELECT COUNT(id) FROM badges WHERE Name = 'Announcer'",
        "question_toks": [
            "How",
            "many",
            "users",
            "obtained",
            "the",
            "``",
            "Announcer",
            "''",
            "badge",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "id",
            ")",
            "FROM",
            "badges",
            "WHERE",
            "Name",
            "=",
            "'Announcer",
            "'"
        ],
        "evidence_toks": [
            "``",
            "Announcer",
            "''",
            "is",
            "the",
            "Name",
            "of",
            "badge",
            ";",
            "user",
            "refers",
            "to",
            "UserId"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM.",
        "evidence": "detailed content of the comment refers to Text; created on 7/19/2010 7:39:08 PM refers to CreationDate = '2010-07-19 19:25:47'",
        "SQL": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47'",
        "question_toks": [
            "State",
            "the",
            "detailed",
            "content",
            "of",
            "the",
            "comment",
            "which",
            "was",
            "created",
            "on",
            "7/19/2010",
            "7:25:47",
            "PM",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "Text",
            "FROM",
            "comments",
            "WHERE",
            "CreationDate",
            "=",
            "'2010-07-19",
            "19:25:47",
            "'"
        ],
        "evidence_toks": [
            "detailed",
            "content",
            "of",
            "the",
            "comment",
            "refers",
            "to",
            "Text",
            ";",
            "created",
            "on",
            "7/19/2010",
            "7:39:08",
            "PM",
            "refers",
            "to",
            "CreationDate",
            "=",
            "'2010-07-19",
            "19:25:47",
            "'"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "What are the names of badges that users who have the highest reputation obtained?",
        "evidence": "highest reputation refers to Max(Reputation); user refers to UserId",
        "SQL": "SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation DESC LIMIT 1",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "badges",
            "that",
            "users",
            "who",
            "have",
            "the",
            "highest",
            "reputation",
            "obtained",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "users",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "badges",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.UserId",
            "ORDER",
            "BY",
            "T1.Reputation",
            "DESC",
            "LIMIT",
            "1"
        ],
        "evidence_toks": [
            "highest",
            "reputation",
            "refers",
            "to",
            "Max",
            "(",
            "Reputation",
            ")",
            ";",
            "user",
            "refers",
            "to",
            "UserId"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Mention the reputation of users who had obtained the badge on 7/19/2010 7:39:08 PM.",
        "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08'",
        "SQL": "SELECT T1.Reputation FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08'",
        "question_toks": [
            "Mention",
            "the",
            "reputation",
            "of",
            "users",
            "who",
            "had",
            "obtained",
            "the",
            "badge",
            "on",
            "7/19/2010",
            "7:39:08",
            "PM",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "T1.Reputation",
            "FROM",
            "users",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "badges",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.UserId",
            "WHERE",
            "T2.Date",
            "=",
            "'2010-07-19",
            "19:39:08",
            "'"
        ],
        "evidence_toks": [
            "on",
            "7/19/2010",
            "7:39:08",
            "PM",
            "refers",
            "to",
            "Date",
            "=",
            "'2010-07-19",
            "19:39:08",
            "'"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "What is the comment's rating score of the post which was created on 7/19/2010 7:14:43 PM",
        "evidence": "created on 7/19/2010 7:14:43 PM refers to CreationDate = '2010-07-19 19:14:43'",
        "SQL": "SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:14:43'",
        "question_toks": [
            "What",
            "is",
            "the",
            "comment",
            "'s",
            "rating",
            "score",
            "of",
            "the",
            "post",
            "which",
            "was",
            "created",
            "on",
            "7/19/2010",
            "7:14:43",
            "PM"
        ],
        "SQL_toks": [
            "SELECT",
            "T1.Score",
            "FROM",
            "comments",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "posts",
            "AS",
            "T2",
            "ON",
            "T1.PostId",
            "=",
            "T2.Id",
            "WHERE",
            "T1.CreationDate",
            "=",
            "'2010-07-19",
            "19:14:43",
            "'"
        ],
        "evidence_toks": [
            "created",
            "on",
            "7/19/2010",
            "7:14:43",
            "PM",
            "refers",
            "to",
            "CreationDate",
            "=",
            "'2010-07-19",
            "19:14:43",
            "'"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "List out the age of users who located in Vienna, Austria obtained the badge?",
        "evidence": "\"Vienna, Austria\" is the Location",
        "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
        "question_toks": [
            "List",
            "out",
            "the",
            "age",
            "of",
            "users",
            "who",
            "located",
            "in",
            "Vienna",
            ",",
            "Austria",
            "obtained",
            "the",
            "badge",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "T1.Age",
            "FROM",
            "users",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "badges",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.UserId",
            "WHERE",
            "T1.Location",
            "=",
            "'Vienna",
            ",",
            "Austria",
            "'"
        ],
        "evidence_toks": [
            "``",
            "Vienna",
            ",",
            "Austria",
            "''",
            "is",
            "the",
            "Location"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "How many adults who obtained the badge Supporter?",
        "evidence": "Supporter is the Name of badge; adult refers to Age BETWEEN 19 AND 65",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65",
        "question_toks": [
            "How",
            "many",
            "adults",
            "who",
            "obtained",
            "the",
            "badge",
            "Supporter",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "T1.Id",
            ")",
            "FROM",
            "users",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "badges",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.UserId",
            "WHERE",
            "T2.Name",
            "=",
            "'Supporter",
            "'",
            "AND",
            "T1.Age",
            "BETWEEN",
            "19",
            "AND",
            "65"
        ],
        "evidence_toks": [
            "Supporter",
            "is",
            "the",
            "Name",
            "of",
            "badge",
            ";",
            "adult",
            "refers",
            "to",
            "Age",
            "BETWEEN",
            "19",
            "AND",
            "65"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
        "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
        "question_toks": [
            "State",
            "the",
            "name",
            "of",
            "badge",
            "that",
            "the",
            "user",
            "whose",
            "display",
            "name",
            "is",
            "``",
            "Sharpie",
            "''",
            "obtained",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "T2.Name",
            "FROM",
            "users",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "badges",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.UserId",
            "WHERE",
            "T1.DisplayName",
            "=",
            "'Sharpie",
            "'"
        ],
        "evidence_toks": [
            "``",
            "Sharpie",
            "''",
            "is",
            "the",
            "DisplayName",
            "of",
            "user",
            ";",
            "user",
            "refers",
            "to",
            "UserId"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "How many votes were made in 2010?",
        "evidence": "YEAR(CreationDate) = 2010;",
        "SQL": "SELECT COUNT(id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'",
        "question_toks": [
            "How",
            "many",
            "votes",
            "were",
            "made",
            "in",
            "2010",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "id",
            ")",
            "FROM",
            "votes",
            "WHERE",
            "STRFTIME",
            "(",
            "'",
            "%",
            "Y",
            "'",
            ",",
            "CreationDate",
            ")",
            "=",
            "'2010",
            "'"
        ],
        "evidence_toks": [
            "YEAR",
            "(",
            "CreationDate",
            ")",
            "=",
            "2010",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "How many users were adult?",
        "evidence": "adult refers to user where Age BETWEEN 19 and 65;",
        "SQL": "SELECT COUNT(id) FROM users WHERE Age BETWEEN 19 AND 65",
        "question_toks": [
            "How",
            "many",
            "users",
            "were",
            "adult",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "id",
            ")",
            "FROM",
            "users",
            "WHERE",
            "Age",
            "BETWEEN",
            "19",
            "AND",
            "65"
        ],
        "evidence_toks": [
            "adult",
            "refers",
            "to",
            "user",
            "where",
            "Age",
            "BETWEEN",
            "19",
            "and",
            "65",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Which users have the highest number of views?",
        "evidence": "users have the highest number of views refer to DisplayName where MAX(Views);",
        "SQL": "SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
        "question_toks": [
            "Which",
            "users",
            "have",
            "the",
            "highest",
            "number",
            "of",
            "views",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "Id",
            ",",
            "DisplayName",
            "FROM",
            "users",
            "WHERE",
            "Views",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Views",
            ")",
            "FROM",
            "users",
            ")"
        ],
        "evidence_toks": [
            "users",
            "have",
            "the",
            "highest",
            "number",
            "of",
            "views",
            "refer",
            "to",
            "DisplayName",
            "where",
            "MAX",
            "(",
            "Views",
            ")",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "What is the name of tags used by John Stauffer's?",
        "evidence": "DisplayName = 'John Stauffer';",
        "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Stauffer'",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "of",
            "tags",
            "used",
            "by",
            "John",
            "Stauffer",
            "'s",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "T3.Tags",
            "FROM",
            "users",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "postHistory",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.UserId",
            "INNER",
            "JOIN",
            "posts",
            "AS",
            "T3",
            "ON",
            "T2.PostId",
            "=",
            "T3.Id",
            "WHERE",
            "T1.DisplayName",
            "=",
            "'John",
            "Stauffer",
            "'"
        ],
        "evidence_toks": [
            "DisplayName",
            "=",
            "'John",
            "Stauffer",
            "'",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "How many votes were made by Harlan?",
        "evidence": "DisplayName = 'Harlan';",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN votes AS T3 ON T3.PostId = T2.PostId WHERE T1.DisplayName = 'Harlan'",
        "question_toks": [
            "How",
            "many",
            "votes",
            "were",
            "made",
            "by",
            "Harlan",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "T1.Id",
            ")",
            "FROM",
            "users",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "postHistory",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.UserId",
            "INNER",
            "JOIN",
            "votes",
            "AS",
            "T3",
            "ON",
            "T3.PostId",
            "=",
            "T2.PostId",
            "WHERE",
            "T1.DisplayName",
            "=",
            "'Harlan",
            "'"
        ],
        "evidence_toks": [
            "DisplayName",
            "=",
            "'Harlan",
            "'",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Which post by slashnick has the most answers count? State the post ID.",
        "evidence": "most answers count refers to MAX(AnswerCount); DisplayName = 'slashnick';",
        "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
        "question_toks": [
            "Which",
            "post",
            "by",
            "slashnick",
            "has",
            "the",
            "most",
            "answers",
            "count",
            "?",
            "State",
            "the",
            "post",
            "ID",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "T2.PostId",
            "FROM",
            "users",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "postHistory",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.UserId",
            "INNER",
            "JOIN",
            "posts",
            "AS",
            "T3",
            "ON",
            "T2.PostId",
            "=",
            "T3.Id",
            "WHERE",
            "T1.DisplayName",
            "=",
            "'slashnick",
            "'",
            "ORDER",
            "BY",
            "T3.AnswerCount",
            "DESC",
            "LIMIT",
            "1"
        ],
        "evidence_toks": [
            "most",
            "answers",
            "count",
            "refers",
            "to",
            "MAX",
            "(",
            "AnswerCount",
            ")",
            ";",
            "DisplayName",
            "=",
            "'slashnick",
            "'",
            ";"
        ],
        "difficulty": "moderate"
    },
    {
        "db_id": "codebase_community",
        "question": "How many negative comments did Neil McGuigan get in his posts?",
        "evidence": "Negative comment refers to score < 60; DisplayName = 'Neil McGuigan';",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId INNER JOIN postHistory AS T3 ON T2.PostId = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T2.score < 60",
        "question_toks": [
            "How",
            "many",
            "negative",
            "comments",
            "did",
            "Neil",
            "McGuigan",
            "get",
            "in",
            "his",
            "posts",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "T1.Id",
            ")",
            "FROM",
            "users",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "comments",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.UserId",
            "INNER",
            "JOIN",
            "postHistory",
            "AS",
            "T3",
            "ON",
            "T2.PostId",
            "=",
            "T3.PostId",
            "WHERE",
            "T1.DisplayName",
            "=",
            "'Neil",
            "McGuigan",
            "'",
            "AND",
            "T2.score",
            "<",
            "60"
        ],
        "evidence_toks": [
            "Negative",
            "comment",
            "refers",
            "to",
            "score",
            "<",
            "60",
            ";",
            "DisplayName",
            "=",
            "'Neil",
            "McGuigan",
            "'",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "List all the name of users that obtained the Organizer Badges.",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
        "question_toks": [
            "List",
            "all",
            "the",
            "name",
            "of",
            "users",
            "that",
            "obtained",
            "the",
            "Organizer",
            "Badges",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "T1.DisplayName",
            "FROM",
            "users",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "badges",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.UserId",
            "WHERE",
            "T2.",
            "`",
            "Name",
            "`",
            "=",
            "'Organizer",
            "'"
        ],
        "evidence_toks": [
            "name",
            "of",
            "users",
            "refers",
            "to",
            "DisplayName",
            ";",
            "the",
            "Organizer",
            "Badges",
            "refer",
            "to",
            "badges",
            "where",
            "Name",
            "=",
            "'Organizer",
            "'",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
        "evidence": "DIVIDE(COUNT(PostId WHERE DisplayName = 'Community' and R language)), (COUNT(PostId WHERE DisplayName = 'Jay Stevens')) as percentage; R language refers to tagname = 'r'",
        "SQL": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
        "question_toks": [
            "Based",
            "on",
            "posts",
            "posted",
            "by",
            "Community",
            ",",
            "calculate",
            "the",
            "percentage",
            "of",
            "posts",
            "that",
            "use",
            "the",
            "R",
            "language",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "CAST",
            "(",
            "SUM",
            "(",
            "IIF",
            "(",
            "T3.TagName",
            "=",
            "'",
            "r",
            "'",
            ",",
            "1",
            ",",
            "0",
            ")",
            ")",
            "AS",
            "REAL",
            ")",
            "*",
            "100",
            "/",
            "COUNT",
            "(",
            "T1.Id",
            ")",
            "FROM",
            "users",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "postHistory",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.UserId",
            "INNER",
            "JOIN",
            "tags",
            "AS",
            "T3",
            "ON",
            "T3.ExcerptPostId",
            "=",
            "T2.PostId",
            "WHERE",
            "T1.DisplayName",
            "=",
            "'Community",
            "'"
        ],
        "evidence_toks": [
            "DIVIDE",
            "(",
            "COUNT",
            "(",
            "PostId",
            "WHERE",
            "DisplayName",
            "=",
            "'Community",
            "'",
            "and",
            "R",
            "language",
            ")",
            ")",
            ",",
            "(",
            "COUNT",
            "(",
            "PostId",
            "WHERE",
            "DisplayName",
            "=",
            "'Jay",
            "Stevens",
            "'",
            ")",
            ")",
            "as",
            "percentage",
            ";",
            "R",
            "language",
            "refers",
            "to",
            "tagname",
            "=",
            "'",
            "r",
            "'"
        ],
        "difficulty": "challenging"
    },
    {
        "db_id": "codebase_community",
        "question": "How many posts were created on 21st July, 2010?",
        "evidence": "created on 21st July, 2010 refers to CreationDate BETWEEN '2010-07-21 00:00:00' and '2012-07-21 23:59:59';",
        "SQL": "SELECT COUNT(id) FROM postHistory WHERE date(CreationDate) = '2010-07-21'",
        "question_toks": [
            "How",
            "many",
            "posts",
            "were",
            "created",
            "on",
            "21st",
            "July",
            ",",
            "2010",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "id",
            ")",
            "FROM",
            "postHistory",
            "WHERE",
            "date",
            "(",
            "CreationDate",
            ")",
            "=",
            "'2010-07-21",
            "'"
        ],
        "evidence_toks": [
            "created",
            "on",
            "21st",
            "July",
            ",",
            "2010",
            "refers",
            "to",
            "CreationDate",
            "BETWEEN",
            "'2010-07-21",
            "00:00:00",
            "'",
            "and",
            "'2012-07-21",
            "23:59:59",
            "'",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "What are the display names and ages of user who got the highest in views?",
        "evidence": "the highest in views refers to MAX(Views);",
        "SQL": "SELECT DisplayName, Age FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
        "question_toks": [
            "What",
            "are",
            "the",
            "display",
            "names",
            "and",
            "ages",
            "of",
            "user",
            "who",
            "got",
            "the",
            "highest",
            "in",
            "views",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "DisplayName",
            ",",
            "Age",
            "FROM",
            "users",
            "WHERE",
            "Views",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Views",
            ")",
            "FROM",
            "users",
            ")"
        ],
        "evidence_toks": [
            "the",
            "highest",
            "in",
            "views",
            "refers",
            "to",
            "MAX",
            "(",
            "Views",
            ")",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "How many negative comments were given by user ID 13?",
        "evidence": "negative comments refer to Score < 60;",
        "SQL": "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60",
        "question_toks": [
            "How",
            "many",
            "negative",
            "comments",
            "were",
            "given",
            "by",
            "user",
            "ID",
            "13",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "Id",
            ")",
            "FROM",
            "comments",
            "WHERE",
            "UserId",
            "=",
            "13",
            "AND",
            "Score",
            "<",
            "60"
        ],
        "evidence_toks": [
            "negative",
            "comments",
            "refer",
            "to",
            "Score",
            "<",
            "60",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Provide the badge names received in 2011 for the user whose location is in the North Pole.",
        "evidence": "received in 2011 refers to year(Date) = 2011;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'",
        "question_toks": [
            "Provide",
            "the",
            "badge",
            "names",
            "received",
            "in",
            "2011",
            "for",
            "the",
            "user",
            "whose",
            "location",
            "is",
            "in",
            "the",
            "North",
            "Pole",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "T2.Name",
            "FROM",
            "users",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "badges",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.UserId",
            "WHERE",
            "STRFTIME",
            "(",
            "'",
            "%",
            "Y",
            "'",
            ",",
            "T2.Date",
            ")",
            "=",
            "'2011",
            "'",
            "AND",
            "T1.Location",
            "=",
            "'North",
            "Pole",
            "'"
        ],
        "evidence_toks": [
            "received",
            "in",
            "2011",
            "refers",
            "to",
            "year",
            "(",
            "Date",
            ")",
            "=",
            "2011",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Describe the post history counts and last edit date of the post title \"What is the best introductory Bayesian statistics textbook?\"",
        "evidence": "",
        "SQL": "SELECT T1.Id, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'",
        "question_toks": [
            "Describe",
            "the",
            "post",
            "history",
            "counts",
            "and",
            "last",
            "edit",
            "date",
            "of",
            "the",
            "post",
            "title",
            "``",
            "What",
            "is",
            "the",
            "best",
            "introductory",
            "Bayesian",
            "statistics",
            "textbook",
            "?",
            "''"
        ],
        "SQL_toks": [
            "SELECT",
            "T1.Id",
            ",",
            "T2.LastEditDate",
            "FROM",
            "postHistory",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "posts",
            "AS",
            "T2",
            "ON",
            "T1.PostId",
            "=",
            "T2.Id",
            "WHERE",
            "T2.Title",
            "=",
            "'What",
            "is",
            "the",
            "best",
            "introductory",
            "Bayesian",
            "statistics",
            "textbook",
            "?",
            "'"
        ],
        "evidence_toks": [],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Provide the related post title of \"How to tell if something happened in a data set which monitors a value over time\".",
        "evidence": "",
        "SQL": "SELECT T1.RelatedPostId FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.Id = T1.PostId WHERE T2.Title = 'How to tell if something happened in a data set which monitors a value over time'",
        "question_toks": [
            "Provide",
            "the",
            "related",
            "post",
            "title",
            "of",
            "``",
            "How",
            "to",
            "tell",
            "if",
            "something",
            "happened",
            "in",
            "a",
            "data",
            "set",
            "which",
            "monitors",
            "a",
            "value",
            "over",
            "time",
            "''",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "T1.RelatedPostId",
            "FROM",
            "postLinks",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "posts",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T1.PostId",
            "WHERE",
            "T2.Title",
            "=",
            "'How",
            "to",
            "tell",
            "if",
            "something",
            "happened",
            "in",
            "a",
            "data",
            "set",
            "which",
            "monitors",
            "a",
            "value",
            "over",
            "time",
            "'"
        ],
        "evidence_toks": [],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "List the post IDs and badge names of the user Samuel in 2013.",
        "evidence": "Samuel refers to UserDisplayName; YEAR(CreationDate) = 2013 relates to PostId; YEAR(Date) = 2013 relates to the badge;",
        "SQL": "SELECT T1.PostId, T2.Name FROM postHistory AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND STRFTIME('%Y', T1.CreationDate) = '2013' AND STRFTIME('%Y', T2.Date) = '2013'",
        "question_toks": [
            "List",
            "the",
            "post",
            "IDs",
            "and",
            "badge",
            "names",
            "of",
            "the",
            "user",
            "Samuel",
            "in",
            "2013",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "T1.PostId",
            ",",
            "T2.Name",
            "FROM",
            "postHistory",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "badges",
            "AS",
            "T2",
            "ON",
            "T1.UserId",
            "=",
            "T2.UserId",
            "WHERE",
            "T1.UserDisplayName",
            "=",
            "'Samuel",
            "'",
            "AND",
            "STRFTIME",
            "(",
            "'",
            "%",
            "Y",
            "'",
            ",",
            "T1.CreationDate",
            ")",
            "=",
            "'2013",
            "'",
            "AND",
            "STRFTIME",
            "(",
            "'",
            "%",
            "Y",
            "'",
            ",",
            "T2.Date",
            ")",
            "=",
            "'2013",
            "'"
        ],
        "evidence_toks": [
            "Samuel",
            "refers",
            "to",
            "UserDisplayName",
            ";",
            "YEAR",
            "(",
            "CreationDate",
            ")",
            "=",
            "2013",
            "relates",
            "to",
            "PostId",
            ";",
            "YEAR",
            "(",
            "Date",
            ")",
            "=",
            "2013",
            "relates",
            "to",
            "the",
            "badge",
            ";"
        ],
        "difficulty": "moderate"
    },
    {
        "db_id": "codebase_community",
        "question": "What is the owner's display name of the most popular post?",
        "evidence": "Higher view count means the post has higher popularity; the most popular post refers to MAX(ViewCount);",
        "SQL": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1 )",
        "question_toks": [
            "What",
            "is",
            "the",
            "owner",
            "'s",
            "display",
            "name",
            "of",
            "the",
            "most",
            "popular",
            "post",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "DisplayName",
            "FROM",
            "users",
            "WHERE",
            "Id",
            "=",
            "(",
            "SELECT",
            "OwnerUserId",
            "FROM",
            "posts",
            "ORDER",
            "BY",
            "ViewCount",
            "DESC",
            "LIMIT",
            "1",
            ")"
        ],
        "evidence_toks": [
            "Higher",
            "view",
            "count",
            "means",
            "the",
            "post",
            "has",
            "higher",
            "popularity",
            ";",
            "the",
            "most",
            "popular",
            "post",
            "refers",
            "to",
            "MAX",
            "(",
            "ViewCount",
            ")",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag.",
        "evidence": "user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';",
        "SQL": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'",
        "question_toks": [
            "Mention",
            "the",
            "display",
            "name",
            "and",
            "location",
            "of",
            "the",
            "user",
            "who",
            "owned",
            "the",
            "excerpt",
            "post",
            "with",
            "hypothesis-testing",
            "tag",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "T3.DisplayName",
            ",",
            "T3.Location",
            "FROM",
            "tags",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "posts",
            "AS",
            "T2",
            "ON",
            "T1.ExcerptPostId",
            "=",
            "T2.Id",
            "INNER",
            "JOIN",
            "users",
            "AS",
            "T3",
            "ON",
            "T3.Id",
            "=",
            "T2.OwnerUserId",
            "WHERE",
            "T1.TagName",
            "=",
            "'hypothesis-testing",
            "'"
        ],
        "evidence_toks": [
            "user",
            "who",
            "owned",
            "the",
            "excerpt",
            "post",
            "with",
            "hypothesis-testing",
            "tag",
            "refers",
            "to",
            "OwnerUserId",
            "WHERE",
            "TagName",
            "=",
            "'hypothesis-testing",
            "'",
            ";"
        ],
        "difficulty": "moderate"
    },
    {
        "db_id": "codebase_community",
        "question": "Write down the related posts titles and link type IDs of the post \"What are principal component scores?\".",
        "evidence": "Title = 'What are principal component scores?';",
        "SQL": "SELECT T2.RelatedPostId, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'What are principal component scores?'",
        "question_toks": [
            "Write",
            "down",
            "the",
            "related",
            "posts",
            "titles",
            "and",
            "link",
            "type",
            "IDs",
            "of",
            "the",
            "post",
            "``",
            "What",
            "are",
            "principal",
            "component",
            "scores",
            "?",
            "``",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "T2.RelatedPostId",
            ",",
            "T2.LinkTypeId",
            "FROM",
            "posts",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "postLinks",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.PostId",
            "WHERE",
            "T1.Title",
            "=",
            "'What",
            "are",
            "principal",
            "component",
            "scores",
            "?",
            "'"
        ],
        "evidence_toks": [
            "Title",
            "=",
            "'What",
            "are",
            "principal",
            "component",
            "scores",
            "?",
            "'",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "How old is the most influential user?",
        "evidence": "How old describes age; the most influential refers to user where MAX(Reputation);",
        "SQL": "SELECT Age FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
        "question_toks": [
            "How",
            "old",
            "is",
            "the",
            "most",
            "influential",
            "user",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "Age",
            "FROM",
            "users",
            "WHERE",
            "Reputation",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Reputation",
            ")",
            "FROM",
            "users",
            ")"
        ],
        "evidence_toks": [
            "How",
            "old",
            "describes",
            "age",
            ";",
            "the",
            "most",
            "influential",
            "refers",
            "to",
            "user",
            "where",
            "MAX",
            "(",
            "Reputation",
            ")",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "How many posts with votes that were created in 2011 have a bounty of 50?",
        "evidence": "created in 2012 refers YEAR(CreationDate) = 2011; BountyAmount = 50;",
        "SQL": "SELECT COUNT(Id) FROM votes WHERE BountyAmount = 50 AND STRFTIME('%Y', CreationDate) = '2011'",
        "question_toks": [
            "How",
            "many",
            "posts",
            "with",
            "votes",
            "that",
            "were",
            "created",
            "in",
            "2011",
            "have",
            "a",
            "bounty",
            "of",
            "50",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "Id",
            ")",
            "FROM",
            "votes",
            "WHERE",
            "BountyAmount",
            "=",
            "50",
            "AND",
            "STRFTIME",
            "(",
            "'",
            "%",
            "Y",
            "'",
            ",",
            "CreationDate",
            ")",
            "=",
            "'2011",
            "'"
        ],
        "evidence_toks": [
            "created",
            "in",
            "2012",
            "refers",
            "YEAR",
            "(",
            "CreationDate",
            ")",
            "=",
            "2011",
            ";",
            "BountyAmount",
            "=",
            "50",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "What is the title of the post with the oldest post link?",
        "evidence": "the oldest post link refers to MIN(CreaionDate);",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T2.PostId = T1.Id ORDER BY T1.CreaionDate LIMIT 1",
        "question_toks": [
            "What",
            "is",
            "the",
            "title",
            "of",
            "the",
            "post",
            "with",
            "the",
            "oldest",
            "post",
            "link",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "T1.Title",
            "FROM",
            "posts",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "postLinks",
            "AS",
            "T2",
            "ON",
            "T2.PostId",
            "=",
            "T1.Id",
            "ORDER",
            "BY",
            "T1.CreaionDate",
            "LIMIT",
            "1"
        ],
        "evidence_toks": [
            "the",
            "oldest",
            "post",
            "link",
            "refers",
            "to",
            "MIN",
            "(",
            "CreaionDate",
            ")",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "What is the display name of the user who acquired the highest amount of badges?",
        "evidence": "highest amount of badges refers to MAX(COUNT(Name));",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1",
        "question_toks": [
            "What",
            "is",
            "the",
            "display",
            "name",
            "of",
            "the",
            "user",
            "who",
            "acquired",
            "the",
            "highest",
            "amount",
            "of",
            "badges",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "T1.DisplayName",
            "FROM",
            "users",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "badges",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.UserId",
            "GROUP",
            "BY",
            "T1.DisplayName",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "T1.Id",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "evidence_toks": [
            "highest",
            "amount",
            "of",
            "badges",
            "refers",
            "to",
            "MAX",
            "(",
            "COUNT",
            "(",
            "Name",
            ")",
            ")",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "When did \"chl\" cast its first vote in a post?",
        "evidence": "DisplayName = 'chl'; cast its first vote refers to MIN(CreationDate);",
        "SQL": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1",
        "question_toks": [
            "When",
            "did",
            "``",
            "chl",
            "''",
            "cast",
            "its",
            "first",
            "vote",
            "in",
            "a",
            "post",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "T2.CreationDate",
            "FROM",
            "users",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "votes",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.UserId",
            "WHERE",
            "T1.DisplayName",
            "=",
            "'chl",
            "'",
            "ORDER",
            "BY",
            "T2.CreationDate",
            "LIMIT",
            "1"
        ],
        "evidence_toks": [
            "DisplayName",
            "=",
            "'chl",
            "'",
            ";",
            "cast",
            "its",
            "first",
            "vote",
            "refers",
            "to",
            "MIN",
            "(",
            "CreationDate",
            ")",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "What is the display name of the user who acquired the first Archeologist badge?",
        "evidence": "Archeologist is the name of the badge; acquired the first refers to MIN(Date);",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Archeologist' ORDER BY T2.Date LIMIT 1",
        "question_toks": [
            "What",
            "is",
            "the",
            "display",
            "name",
            "of",
            "the",
            "user",
            "who",
            "acquired",
            "the",
            "first",
            "Archeologist",
            "badge",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "T1.DisplayName",
            "FROM",
            "users",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "badges",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.UserId",
            "WHERE",
            "T2.",
            "`",
            "Name",
            "`",
            "=",
            "'Archeologist",
            "'",
            "ORDER",
            "BY",
            "T2.Date",
            "LIMIT",
            "1"
        ],
        "evidence_toks": [
            "Archeologist",
            "is",
            "the",
            "name",
            "of",
            "the",
            "badge",
            ";",
            "acquired",
            "the",
            "first",
            "refers",
            "to",
            "MIN",
            "(",
            "Date",
            ")",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "What is the average number of posts voted by the oldest users?",
        "evidence": "average number of posts voted refers to AVG(PostId) FROM votes; the oldest users refer to MAX(Age);",
        "SQL": "SELECT AVG(PostId) FROM votes WHERE UserId IN ( SELECT Id FROM users WHERE Age = ( SELECT MAX(Age) FROM users ) )",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "number",
            "of",
            "posts",
            "voted",
            "by",
            "the",
            "oldest",
            "users",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "AVG",
            "(",
            "PostId",
            ")",
            "FROM",
            "votes",
            "WHERE",
            "UserId",
            "IN",
            "(",
            "SELECT",
            "Id",
            "FROM",
            "users",
            "WHERE",
            "Age",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Age",
            ")",
            "FROM",
            "users",
            ")",
            ")"
        ],
        "evidence_toks": [
            "average",
            "number",
            "of",
            "posts",
            "voted",
            "refers",
            "to",
            "AVG",
            "(",
            "PostId",
            ")",
            "FROM",
            "votes",
            ";",
            "the",
            "oldest",
            "users",
            "refer",
            "to",
            "MAX",
            "(",
            "Age",
            ")",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Who has the highest reputation? Please give the display name.",
        "evidence": "the highest reputation refers to MAX(Reputation);",
        "SQL": "SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
        "question_toks": [
            "Who",
            "has",
            "the",
            "highest",
            "reputation",
            "?",
            "Please",
            "give",
            "the",
            "display",
            "name",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "DisplayName",
            "FROM",
            "users",
            "WHERE",
            "Reputation",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Reputation",
            ")",
            "FROM",
            "users",
            ")"
        ],
        "evidence_toks": [
            "the",
            "highest",
            "reputation",
            "refers",
            "to",
            "MAX",
            "(",
            "Reputation",
            ")",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Please list all display names of users who are adults.",
        "evidence": "adults refer to users where Age BETWEEN 19 and 65;",
        "SQL": "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65",
        "question_toks": [
            "Please",
            "list",
            "all",
            "display",
            "names",
            "of",
            "users",
            "who",
            "are",
            "adults",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "DisplayName",
            "FROM",
            "users",
            "WHERE",
            "Age",
            "BETWEEN",
            "19",
            "AND",
            "65"
        ],
        "evidence_toks": [
            "adults",
            "refer",
            "to",
            "users",
            "where",
            "Age",
            "BETWEEN",
            "19",
            "and",
            "65",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "How many posts did Jay Stevens have in 2010?",
        "evidence": "DisplayName = 'Jay Stevens'; in 2010 refers to YEAR(CreationDate) = 2010;",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' AND T1.DisplayName = 'Jay Stevens'",
        "question_toks": [
            "How",
            "many",
            "posts",
            "did",
            "Jay",
            "Stevens",
            "have",
            "in",
            "2010",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "T1.Id",
            ")",
            "FROM",
            "users",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "posts",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.OwnerUserId",
            "WHERE",
            "STRFTIME",
            "(",
            "'",
            "%",
            "Y",
            "'",
            ",",
            "T1.CreationDate",
            ")",
            "=",
            "'2010",
            "'",
            "AND",
            "T1.DisplayName",
            "=",
            "'Jay",
            "Stevens",
            "'"
        ],
        "evidence_toks": [
            "DisplayName",
            "=",
            "'Jay",
            "Stevens",
            "'",
            ";",
            "in",
            "2010",
            "refers",
            "to",
            "YEAR",
            "(",
            "CreationDate",
            ")",
            "=",
            "2010",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Which post has the highest score? Please give its id and title's name.",
        "evidence": "the highest score refers to MAX(Score); owner's name refers to DisplayName;",
        "SQL": "SELECT T1.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T2.Score DESC LIMIT 1",
        "question_toks": [
            "Which",
            "post",
            "has",
            "the",
            "highest",
            "score",
            "?",
            "Please",
            "give",
            "its",
            "id",
            "and",
            "title",
            "'s",
            "name",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "T1.Id",
            ",",
            "T2.Title",
            "FROM",
            "users",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "posts",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.OwnerUserId",
            "ORDER",
            "BY",
            "T2.Score",
            "DESC",
            "LIMIT",
            "1"
        ],
        "evidence_toks": [
            "the",
            "highest",
            "score",
            "refers",
            "to",
            "MAX",
            "(",
            "Score",
            ")",
            ";",
            "owner",
            "'s",
            "name",
            "refers",
            "to",
            "DisplayName",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it.",
        "evidence": "views refer to ViewCount; Name the user refers to DisplayName; Text = 'Computer Game Datasets';",
        "SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
        "question_toks": [
            "Identify",
            "the",
            "total",
            "views",
            "on",
            "the",
            "post",
            "'Computer",
            "Game",
            "Datasets",
            "'",
            ".",
            "Name",
            "the",
            "user",
            "who",
            "posted",
            "it",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "T2.ViewCount",
            ",",
            "T3.DisplayName",
            "FROM",
            "postHistory",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "posts",
            "AS",
            "T2",
            "ON",
            "T1.PostId",
            "=",
            "T2.Id",
            "INNER",
            "JOIN",
            "users",
            "AS",
            "T3",
            "ON",
            "T2.LastEditorUserId",
            "=",
            "T3.Id",
            "WHERE",
            "T1.Text",
            "=",
            "'Computer",
            "Game",
            "Datasets",
            "'"
        ],
        "evidence_toks": [
            "views",
            "refer",
            "to",
            "ViewCount",
            ";",
            "Name",
            "the",
            "user",
            "refers",
            "to",
            "DisplayName",
            ";",
            "Text",
            "=",
            "'Computer",
            "Game",
            "Datasets",
            "'",
            ";"
        ],
        "difficulty": "moderate"
    },
    {
        "db_id": "codebase_community",
        "question": "Identify the total number of posts with views above average.",
        "evidence": "views above average refer to ViewCount > AVG(ViewCount);",
        "SQL": "SELECT Id FROM posts WHERE ViewCount > ( SELECT AVG(ViewCount) FROM posts )",
        "question_toks": [
            "Identify",
            "the",
            "total",
            "number",
            "of",
            "posts",
            "with",
            "views",
            "above",
            "average",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "Id",
            "FROM",
            "posts",
            "WHERE",
            "ViewCount",
            ">",
            "(",
            "SELECT",
            "AVG",
            "(",
            "ViewCount",
            ")",
            "FROM",
            "posts",
            ")"
        ],
        "evidence_toks": [
            "views",
            "above",
            "average",
            "refer",
            "to",
            "ViewCount",
            ">",
            "AVG",
            "(",
            "ViewCount",
            ")",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "How many comments were added to the post with the highest score?",
        "evidence": "the highest score refers to MAX(Score);",
        "SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY SUM(T1.Score) DESC LIMIT 1",
        "question_toks": [
            "How",
            "many",
            "comments",
            "were",
            "added",
            "to",
            "the",
            "post",
            "with",
            "the",
            "highest",
            "score",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "T1.Id",
            ")",
            "FROM",
            "posts",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "comments",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.PostId",
            "GROUP",
            "BY",
            "T1.Id",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "T1.Score",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "evidence_toks": [
            "the",
            "highest",
            "score",
            "refers",
            "to",
            "MAX",
            "(",
            "Score",
            ")",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Identify the number of posts that have been viewed over 35000 times but have received no comments from other users.",
        "evidence": "have been viewed over 35000 times refers to ViewCount > 35000; received no comments refers to CommentCount = 0;",
        "SQL": "SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0",
        "question_toks": [
            "Identify",
            "the",
            "number",
            "of",
            "posts",
            "that",
            "have",
            "been",
            "viewed",
            "over",
            "35000",
            "times",
            "but",
            "have",
            "received",
            "no",
            "comments",
            "from",
            "other",
            "users",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "Id",
            ")",
            "FROM",
            "posts",
            "WHERE",
            "ViewCount",
            ">",
            "35000",
            "AND",
            "CommentCount",
            "=",
            "0"
        ],
        "evidence_toks": [
            "have",
            "been",
            "viewed",
            "over",
            "35000",
            "times",
            "refers",
            "to",
            "ViewCount",
            ">",
            "35000",
            ";",
            "received",
            "no",
            "comments",
            "refers",
            "to",
            "CommentCount",
            "=",
            "0",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Identify the latest badge awarded to the user with the display name Emmett.",
        "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
        "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
        "question_toks": [
            "Identify",
            "the",
            "latest",
            "badge",
            "awarded",
            "to",
            "the",
            "user",
            "with",
            "the",
            "display",
            "name",
            "Emmett",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "T1.Name",
            "FROM",
            "badges",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "users",
            "AS",
            "T2",
            "ON",
            "T1.UserId",
            "=",
            "T2.Id",
            "WHERE",
            "T2.DisplayName",
            "=",
            "'Emmett",
            "'",
            "ORDER",
            "BY",
            "T1.Date",
            "DESC",
            "LIMIT",
            "1"
        ],
        "evidence_toks": [
            "the",
            "latest",
            "badge",
            "refers",
            "to",
            "Name",
            "FROM",
            "badges",
            "where",
            "MAX",
            "(",
            "Date",
            ")",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Identify the number of adult users who have cast over 5000 upvotes.",
        "evidence": "adult users refer to Age BETWEEN 19 and 65; over 5000 upvotes refer to UpVotes > 5000;",
        "SQL": "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000",
        "question_toks": [
            "Identify",
            "the",
            "number",
            "of",
            "adult",
            "users",
            "who",
            "have",
            "cast",
            "over",
            "5000",
            "upvotes",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "Id",
            ")",
            "FROM",
            "users",
            "WHERE",
            "Age",
            "BETWEEN",
            "19",
            "AND",
            "65",
            "AND",
            "UpVotes",
            ">",
            "5000"
        ],
        "evidence_toks": [
            "adult",
            "users",
            "refer",
            "to",
            "Age",
            "BETWEEN",
            "19",
            "and",
            "65",
            ";",
            "over",
            "5000",
            "upvotes",
            "refer",
            "to",
            "UpVotes",
            ">",
            "5000",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Identify the number of posts and comments left by the user, who has the latest created user account.",
        "evidence": "the latest created user account refers to MAX(CreationDate);",
        "SQL": "SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T3.PostId = T2.Id ORDER BY T1.CreationDate DESC LIMIT 1",
        "question_toks": [
            "Identify",
            "the",
            "number",
            "of",
            "posts",
            "and",
            "comments",
            "left",
            "by",
            "the",
            "user",
            ",",
            "who",
            "has",
            "the",
            "latest",
            "created",
            "user",
            "account",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "T2.Id",
            ")",
            "FROM",
            "users",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "posts",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.OwnerUserId",
            "INNER",
            "JOIN",
            "comments",
            "AS",
            "T3",
            "ON",
            "T3.PostId",
            "=",
            "T2.Id",
            "ORDER",
            "BY",
            "T1.CreationDate",
            "DESC",
            "LIMIT",
            "1"
        ],
        "evidence_toks": [
            "the",
            "latest",
            "created",
            "user",
            "account",
            "refers",
            "to",
            "MAX",
            "(",
            "CreationDate",
            ")",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Provide the text of the latest comment to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
        "evidence": "the latest comment refers to MAX(CreationDate);",
        "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 1",
        "question_toks": [
            "Provide",
            "the",
            "text",
            "of",
            "the",
            "latest",
            "comment",
            "to",
            "the",
            "post",
            "with",
            "the",
            "title",
            "'Analysing",
            "wind",
            "data",
            "with",
            "R",
            "'",
            "and",
            "the",
            "display",
            "name",
            "of",
            "the",
            "user",
            "who",
            "left",
            "it",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "T3.Text",
            ",",
            "T1.DisplayName",
            "FROM",
            "users",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "posts",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.OwnerUserId",
            "INNER",
            "JOIN",
            "comments",
            "AS",
            "T3",
            "ON",
            "T2.Id",
            "=",
            "T3.PostId",
            "WHERE",
            "T2.Title",
            "=",
            "'Analysing",
            "wind",
            "data",
            "with",
            "R",
            "'",
            "ORDER",
            "BY",
            "T1.CreationDate",
            "DESC",
            "LIMIT",
            "1"
        ],
        "evidence_toks": [
            "the",
            "latest",
            "comment",
            "refers",
            "to",
            "MAX",
            "(",
            "CreationDate",
            ")",
            ";"
        ],
        "difficulty": "moderate"
    },
    {
        "db_id": "codebase_community",
        "question": "Count the number of posts with a tag specified as 'careers'.",
        "evidence": "tag specified as 'careers' refers to TagName = 'careers';",
        "SQL": "SELECT COUNT(Id) FROM tags WHERE TagName = 'careers'",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "posts",
            "with",
            "a",
            "tag",
            "specified",
            "as",
            "'careers",
            "'",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "Id",
            ")",
            "FROM",
            "tags",
            "WHERE",
            "TagName",
            "=",
            "'careers",
            "'"
        ],
        "evidence_toks": [
            "tag",
            "specified",
            "as",
            "'careers",
            "'",
            "refers",
            "to",
            "TagName",
            "=",
            "'careers",
            "'",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
        "evidence": "",
        "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
        "question_toks": [
            "What",
            "is",
            "the",
            "reputation",
            "and",
            "view",
            "count",
            "of",
            "the",
            "user",
            ",",
            "who",
            "is",
            "known",
            "by",
            "his",
            "or",
            "her",
            "display",
            "name",
            "'Jarrod",
            "Dixon",
            "'",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "Reputation",
            ",",
            "Views",
            "FROM",
            "users",
            "WHERE",
            "DisplayName",
            "=",
            "'Jarrod",
            "Dixon",
            "'"
        ],
        "evidence_toks": [],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Among all the posts posted by the most influential user, identify the percentage with a score above 50.",
        "evidence": "The user with higher reputation has more influence; DIVIDE(COUNT(stats_posts.Id where Score > = 50 and MAX(Reputation))), COUNT(stats_posts.Id where MAX(Reputation)) as percentage;",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Score >= 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation",
        "question_toks": [
            "Among",
            "all",
            "the",
            "posts",
            "posted",
            "by",
            "the",
            "most",
            "influential",
            "user",
            ",",
            "identify",
            "the",
            "percentage",
            "with",
            "a",
            "score",
            "above",
            "50",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "CAST",
            "(",
            "SUM",
            "(",
            "CASE",
            "WHEN",
            "T2.Score",
            ">",
            "=",
            "50",
            "THEN",
            "1",
            "ELSE",
            "0",
            "END",
            ")",
            "AS",
            "REAL",
            ")",
            "*",
            "100",
            "/",
            "COUNT",
            "(",
            "T1.Id",
            ")",
            "FROM",
            "users",
            "T1",
            "INNER",
            "JOIN",
            "posts",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.OwnerUserId",
            "INNER",
            "JOIN",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Reputation",
            ")",
            "AS",
            "max_reputation",
            "FROM",
            "users",
            ")",
            "T3",
            "ON",
            "T1.Reputation",
            "=",
            "T3.max_reputation"
        ],
        "evidence_toks": [
            "The",
            "user",
            "with",
            "higher",
            "reputation",
            "has",
            "more",
            "influence",
            ";",
            "DIVIDE",
            "(",
            "COUNT",
            "(",
            "stats_posts.Id",
            "where",
            "Score",
            ">",
            "=",
            "50",
            "and",
            "MAX",
            "(",
            "Reputation",
            ")",
            ")",
            ")",
            ",",
            "COUNT",
            "(",
            "stats_posts.Id",
            "where",
            "MAX",
            "(",
            "Reputation",
            ")",
            ")",
            "as",
            "percentage",
            ";"
        ],
        "difficulty": "challenging"
    },
    {
        "db_id": "codebase_community",
        "question": "How many posts have a score less than 20?",
        "evidence": "score less than 20 refers to Score < 20;",
        "SQL": "SELECT COUNT(id) FROM posts WHERE Score < 20",
        "question_toks": [
            "How",
            "many",
            "posts",
            "have",
            "a",
            "score",
            "less",
            "than",
            "20",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "id",
            ")",
            "FROM",
            "posts",
            "WHERE",
            "Score",
            "<",
            "20"
        ],
        "evidence_toks": [
            "score",
            "less",
            "than",
            "20",
            "refers",
            "to",
            "Score",
            "<",
            "20",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Among the tags with tag ID below 15, how many of them have 20 count of posts and below?",
        "evidence": "ID below 15 refers to Id < 15; have 20 count of posts and below refers to Count < = 20;",
        "SQL": "SELECT COUNT(id) FROM tags WHERE Count <= 20 AND Id < 15",
        "question_toks": [
            "Among",
            "the",
            "tags",
            "with",
            "tag",
            "ID",
            "below",
            "15",
            ",",
            "how",
            "many",
            "of",
            "them",
            "have",
            "20",
            "count",
            "of",
            "posts",
            "and",
            "below",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "id",
            ")",
            "FROM",
            "tags",
            "WHERE",
            "Count",
            "<",
            "=",
            "20",
            "AND",
            "Id",
            "<",
            "15"
        ],
        "evidence_toks": [
            "ID",
            "below",
            "15",
            "refers",
            "to",
            "Id",
            "<",
            "15",
            ";",
            "have",
            "20",
            "count",
            "of",
            "posts",
            "and",
            "below",
            "refers",
            "to",
            "Count",
            "<",
            "=",
            "20",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Give the texts commented on the post titled \"How can I adapt ANOVA for binary data?\".",
        "evidence": "Title = 'How can I adapt ANOVA for binary data?';",
        "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How can I adapt ANOVA for binary data?'",
        "question_toks": [
            "Give",
            "the",
            "texts",
            "commented",
            "on",
            "the",
            "post",
            "titled",
            "``",
            "How",
            "can",
            "I",
            "adapt",
            "ANOVA",
            "for",
            "binary",
            "data",
            "?",
            "``",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "T1.Text",
            "FROM",
            "comments",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "posts",
            "AS",
            "T2",
            "ON",
            "T1.PostId",
            "=",
            "T2.Id",
            "WHERE",
            "T2.Title",
            "=",
            "'How",
            "can",
            "I",
            "adapt",
            "ANOVA",
            "for",
            "binary",
            "data",
            "?",
            "'"
        ],
        "evidence_toks": [
            "Title",
            "=",
            "'How",
            "can",
            "I",
            "adapt",
            "ANOVA",
            "for",
            "binary",
            "data",
            "?",
            "'",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Among the posts with views ranging from 100 to 150, what is the comment with the highest score?",
        "evidence": "views ranging from 100 to 150 refers to ViewCount BETWEEN 100 and 150; comment with the highest score refers to Text where MAX(Score);",
        "SQL": "SELECT Text FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) ORDER BY Score DESC LIMIT 1",
        "question_toks": [
            "Among",
            "the",
            "posts",
            "with",
            "views",
            "ranging",
            "from",
            "100",
            "to",
            "150",
            ",",
            "what",
            "is",
            "the",
            "comment",
            "with",
            "the",
            "highest",
            "score",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "Text",
            "FROM",
            "comments",
            "WHERE",
            "PostId",
            "IN",
            "(",
            "SELECT",
            "Id",
            "FROM",
            "posts",
            "WHERE",
            "ViewCount",
            "BETWEEN",
            "100",
            "AND",
            "150",
            ")",
            "ORDER",
            "BY",
            "Score",
            "DESC",
            "LIMIT",
            "1"
        ],
        "evidence_toks": [
            "views",
            "ranging",
            "from",
            "100",
            "to",
            "150",
            "refers",
            "to",
            "ViewCount",
            "BETWEEN",
            "100",
            "and",
            "150",
            ";",
            "comment",
            "with",
            "the",
            "highest",
            "score",
            "refers",
            "to",
            "Text",
            "where",
            "MAX",
            "(",
            "Score",
            ")",
            ";"
        ],
        "difficulty": "moderate"
    },
    {
        "db_id": "codebase_community",
        "question": "List the creation date and age of the user that commented \"@Jason Punyon in particular gets a humorless downvote for removing my \"verboten\" tag! ;-)\".",
        "evidence": "Text = '@Jason Punyon in particular gets a humorless downvote for removing my \"verboten\" tag! ;-)';",
        "SQL": "SELECT T2.CreationDate, T2.Age FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.text = '@Jason Punyon in particular gets a humorless downvote for removing my \"verboten\" tag! -)'",
        "question_toks": [
            "List",
            "the",
            "creation",
            "date",
            "and",
            "age",
            "of",
            "the",
            "user",
            "that",
            "commented",
            "``",
            "@",
            "Jason",
            "Punyon",
            "in",
            "particular",
            "gets",
            "a",
            "humorless",
            "downvote",
            "for",
            "removing",
            "my",
            "``",
            "verboten",
            "''",
            "tag",
            "!",
            ";",
            "-",
            ")",
            "''",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "T2.CreationDate",
            ",",
            "T2.Age",
            "FROM",
            "comments",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "users",
            "AS",
            "T2",
            "ON",
            "T1.UserId",
            "=",
            "T2.Id",
            "WHERE",
            "T1.text",
            "=",
            "'",
            "@",
            "Jason",
            "Punyon",
            "in",
            "particular",
            "gets",
            "a",
            "humorless",
            "downvote",
            "for",
            "removing",
            "my",
            "``",
            "verboten",
            "''",
            "tag",
            "!",
            "-",
            ")",
            "'"
        ],
        "evidence_toks": [
            "Text",
            "=",
            "'",
            "@",
            "Jason",
            "Punyon",
            "in",
            "particular",
            "gets",
            "a",
            "humorless",
            "downvote",
            "for",
            "removing",
            "my",
            "``",
            "verboten",
            "''",
            "tag",
            "!",
            ";",
            "-",
            ")",
            "'",
            ";"
        ],
        "difficulty": "moderate"
    },
    {
        "db_id": "codebase_community",
        "question": "In comments with 0 score, how many of the posts have view count lower than 5?",
        "evidence": "view count lower than 5 refers to ViewCount < 5;",
        "SQL": "SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount < 5 AND T2.Score = 0",
        "question_toks": [
            "In",
            "comments",
            "with",
            "0",
            "score",
            ",",
            "how",
            "many",
            "of",
            "the",
            "posts",
            "have",
            "view",
            "count",
            "lower",
            "than",
            "5",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "COUNT",
            "(",
            "T1.Id",
            ")",
            "FROM",
            "comments",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "posts",
            "AS",
            "T2",
            "ON",
            "T1.PostId",
            "=",
            "T2.Id",
            "WHERE",
            "T2.ViewCount",
            "<",
            "5",
            "AND",
            "T2.Score",
            "=",
            "0"
        ],
        "evidence_toks": [
            "view",
            "count",
            "lower",
            "than",
            "5",
            "refers",
            "to",
            "ViewCount",
            "<",
            "5",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?",
        "evidence": "Title = 'Group differences on a five point Likert item';",
        "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'",
        "question_toks": [
            "What",
            "is",
            "the",
            "post",
            "ID",
            "and",
            "the",
            "comments",
            "commented",
            "in",
            "the",
            "post",
            "titled",
            "by",
            "``",
            "Group",
            "differences",
            "on",
            "a",
            "five",
            "point",
            "Likert",
            "item",
            "''",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "T2.Id",
            ",",
            "T1.Text",
            "FROM",
            "comments",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "posts",
            "AS",
            "T2",
            "ON",
            "T1.PostId",
            "=",
            "T2.Id",
            "WHERE",
            "T2.Title",
            "=",
            "'Group",
            "differences",
            "on",
            "a",
            "five",
            "point",
            "Likert",
            "item",
            "'"
        ],
        "evidence_toks": [
            "Title",
            "=",
            "'Group",
            "differences",
            "on",
            "a",
            "five",
            "point",
            "Likert",
            "item",
            "'",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "What is the up vote number of the user that commented \"R is also lazy evaluated.\"?",
        "evidence": "commented \"R is also lazy evaluated.\" refers to Text of the comment;",
        "SQL": "SELECT T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'R is also lazy evaluated.'",
        "question_toks": [
            "What",
            "is",
            "the",
            "up",
            "vote",
            "number",
            "of",
            "the",
            "user",
            "that",
            "commented",
            "``",
            "R",
            "is",
            "also",
            "lazy",
            "evaluated",
            ".",
            "``",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "T2.UpVotes",
            "FROM",
            "comments",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "users",
            "AS",
            "T2",
            "ON",
            "T1.UserId",
            "=",
            "T2.Id",
            "WHERE",
            "T1.Text",
            "=",
            "'",
            "R",
            "is",
            "also",
            "lazy",
            "evaluated",
            ".",
            "'"
        ],
        "evidence_toks": [
            "commented",
            "``",
            "R",
            "is",
            "also",
            "lazy",
            "evaluated",
            ".",
            "''",
            "refers",
            "to",
            "Text",
            "of",
            "the",
            "comment",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "List the comments commented by the user with a username of \"Random\".",
        "evidence": "comments refer to Text; username of \"Random\" refers to DisplayName = 'Random';",
        "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Random'",
        "question_toks": [
            "List",
            "the",
            "comments",
            "commented",
            "by",
            "the",
            "user",
            "with",
            "a",
            "username",
            "of",
            "``",
            "Random",
            "''",
            "."
        ],
        "SQL_toks": [
            "SELECT",
            "T1.Text",
            "FROM",
            "comments",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "users",
            "AS",
            "T2",
            "ON",
            "T1.UserId",
            "=",
            "T2.Id",
            "WHERE",
            "T2.DisplayName",
            "=",
            "'Random",
            "'"
        ],
        "evidence_toks": [
            "comments",
            "refer",
            "to",
            "Text",
            ";",
            "username",
            "of",
            "``",
            "Random",
            "''",
            "refers",
            "to",
            "DisplayName",
            "=",
            "'Random",
            "'",
            ";"
        ],
        "difficulty": "simple"
    },
    {
        "db_id": "codebase_community",
        "question": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?",
        "evidence": "DIVIDE(COUNT(UserId where UpVotes = 0 and Score BETWEEN 5 and 10)), (COUNT(UserId where Score BETWEEN 5 and 10)) as percentage;",
        "SQL": "SELECT CAST(SUM(IIF(T1.UpVotes = 0, 1, 0)) AS REAL) / COUNT(T1.Id) AS per FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score BETWEEN 5 AND 10",
        "question_toks": [
            "Among",
            "the",
            "comments",
            "with",
            "scores",
            "between",
            "5",
            "to",
            "10",
            ",",
            "what",
            "is",
            "the",
            "percentage",
            "of",
            "the",
            "users",
            "with",
            "0",
            "up",
            "votes",
            "?"
        ],
        "SQL_toks": [
            "SELECT",
            "CAST",
            "(",
            "SUM",
            "(",
            "IIF",
            "(",
            "T1.UpVotes",
            "=",
            "0",
            ",",
            "1",
            ",",
            "0",
            ")",
            ")",
            "AS",
            "REAL",
            ")",
            "/",
            "COUNT",
            "(",
            "T1.Id",
            ")",
            "AS",
            "per",
            "FROM",
            "users",
            "AS",
            "T1",
            "INNER",
            "JOIN",
            "comments",
            "AS",
            "T2",
            "ON",
            "T1.Id",
            "=",
            "T2.UserId",
            "WHERE",
            "T2.Score",
            "BETWEEN",
            "5",
            "AND",
            "10"
        ],
        "evidence_toks": [
            "DIVIDE",
            "(",
            "COUNT",
            "(",
            "UserId",
            "where",
            "UpVotes",
            "=",
            "0",
            "and",
            "Score",
            "BETWEEN",
            "5",
            "and",
            "10",
            ")",
            ")",
            ",",
            "(",
            "COUNT",
            "(",
            "UserId",
            "where",
            "Score",
            "BETWEEN",
            "5",
            "and",
            "10",
            ")",
            ")",
            "as",
            "percentage",
            ";"
        ],
        "difficulty": "moderate"
    }
]