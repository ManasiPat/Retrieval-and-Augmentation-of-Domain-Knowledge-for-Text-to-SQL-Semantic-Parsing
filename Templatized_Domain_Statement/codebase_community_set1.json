{"0": {"question": "Please list the display names of all the users whose accounts were created in the year 2014.", "GT_SQL": "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2014'", "actual_evidence": ["account created in the year 2014 refers to year(CreationDate) = 2014"], "generic_evidence": ["'users accounts were created in the year 100' refers to STRFTIME('%Y', users.CreationDate) = '100'"]}, "1": {"question": "How many users last accessed the website after 2014/9/1?", "GT_SQL": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'", "actual_evidence": ["last accessed after 2014/9/1 refers to LastAccessDate > '2014-09-01 00:00:00'"], "generic_evidence": ["'users last accessed the website after 100/9/1' refers to date(users.LastAccessDate) > '100-09-01'"]}, "2": {"question": "What is the display name of the user who has the most number of views?", "GT_SQL": "SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )", "actual_evidence": ["user who has the most number of view refers to Max(Views)"], "generic_evidence": ["'the user who has the most number of views' refers to ORDER BY users.Views DESC LIMIT 1"]}, "3": {"question": "How many posts does the user csgillespie own?", "GT_SQL": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "actual_evidence": ["\"csgillespie\" is the DisplayName of user"], "generic_evidence": ["'the user csgillespie owns' refers to users.DisplayName = 'csgillespie'"]}, "4": {"question": "Please list the titles of the posts owned by the user csgillespie?", "GT_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "actual_evidence": ["\"csgillespie\" is the DisplayName of user"], "generic_evidence": ["'the posts owned by the user csgillespie' refers to posts.OwnerDisplayName = 'csgillespie'"]}, "5": {"question": "Who is the owner of the post \"Eliciting priors from experts\"?", "GT_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors FROM experts'", "actual_evidence": ["\"Eliciting priors from experts\" is the Title of post", " owner refers to DisplayName"], "generic_evidence": ["'the post \"Eliciting priors from experts\"' refers to posts.Title = \"Eliciting priors from experts\"", "'the owner of the post' refers to posts.DisplayName"]}, "6": {"question": "What is the title of the post that is owned by csgillespie and has the highest popularity?", "GT_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1", "actual_evidence": ["\"csgillespie\" is the DisplayName of user", " highest popularity refers to Max(ViewCount)"], "generic_evidence": ["'the post that is owned by csgillespie' refers to users.DisplayName = 'csgillespie'", "'the post that has the highest popularity' refers to ORDER BY posts.ViewCount DESC LIMIT 1"]}, "7": {"question": "What is the total number of comments of all the posts owned by csgillespie?", "GT_SQL": "SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "actual_evidence": ["\"csgillespie\" is the DisplayName of user", " total number of comments refers to Sum(CommentCount)"], "generic_evidence": ["'the posts owned by csgillespie' refers to users.DisplayName = 'csgillespie'", "'total number of comments of all the posts' refers to SUM(posts.CommentCount)"]}, "8": {"question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?", "GT_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does NOT mean causation'", "actual_evidence": ["\"Examples for teaching: Correlation does not mean causation\" is the Title of post", " user who last edited refers to LastEditorUserId"], "generic_evidence": ["'the post \"Examples for teaching: Correlation does not mean causation\"' refers to posts.Title = \"Examples for teaching: Correlation does not mean causation\"", "'the user who last edited the post' refers to posts.LastEditorUserId"]}, "9": {"question": "How many badges has the user csgillespie obtained?", "GT_SQL": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "actual_evidence": ["\"csgillespie\" is the DisplayName of user"], "generic_evidence": ["'badges obtained by the user csgillespie' refers to users.DisplayName = 'csgillespie'"]}, "10": {"question": "What is the display name of the user who has obtained the most number of badges?", "GT_SQL": "SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1", "actual_evidence": ["who obtained the most number of badges refers to UserID with Max(Count(Id))"], "generic_evidence": ["'the user who has obtained the most number of badges' refers to ORDER BY COUNT(badges.Id) DESC LIMIT 1"]}, "11": {"question": "What is the average score of the posts owned by the user csgillespie?", "GT_SQL": "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "actual_evidence": ["\"csgillespie\" is the DisplayName of user", " average score refers to AVG(Score)"], "generic_evidence": ["'the posts owned by the user csgillespie' refers to users.DisplayName = 'csgillespie'", "'the average score of the posts' refers to AVG(posts.Score)"]}, "12": {"question": "What is the average number of badges obtained by a user with over 200 views?", "GT_SQL": "SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T2.DisplayName) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Views > 200", "actual_evidence": ["user with over 200 views refers to Views > 200", " average number of badges = Divide (Count(Id), Count(DisplayName))"], "generic_evidence": ["'user with over (100) views' refers to users.Views > 100", "'average number of badges obtained by a user' refers to CAST(COUNT(badges.Id) AS REAL) / COUNT(DISTINCT users.DisplayName)"]}, "13": {"question": "How many votes did the user No.58 take on 2010/7/19?", "GT_SQL": "SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'", "actual_evidence": ["user no. 58 refers to UserId = 58", " on 2010/7/19 refers to CreationDate = '2010-07-19'"], "generic_evidence": ["'the user No.58' refers to votes.UserId = 58 ", "'the user take on 100/7/19' refers to votes.CreationDate = '100-07-19'"]}, "14": {"question": "Give the number of \"Revival\" badges.", "GT_SQL": "SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'", "actual_evidence": ["number refers to Id", " 'Revival' is the Name of badge"], "generic_evidence": ["'number of badges' refers to COUNT(badges.Id)", "'\"Revival\" badges' refers to badges.Name = 'Revival'"]}, "15": {"question": "What is the title for the post which got the highest score comment?", "GT_SQL": "SELECT Title FROM posts WHERE Id = ( SELECT PostId FROM comments ORDER BY Score DESC LIMIT 1 )", "actual_evidence": ["highest score comment refers to Max(comments.Score)"], "generic_evidence": ["'the post which got the highest score comment' refers to ORDER BY comments.Score DESC LIMIT 1"]}, "16": {"question": "For the post which got 1910 view counts, how many comments does it get?", "GT_SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910", "actual_evidence": [], "generic_evidence": []}, "17": {"question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?", "GT_SQL": "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39' AND T2.UserId = 3025", "actual_evidence": ["user no. 3025 refers to UserId = '3025'", " comment at 20:29:39 on 2014/4/23 refers to CreationDate = '2014/4/23 20:29:39'"], "generic_evidence": ["'User No.3025' refers to comments.UserId = '3025'", "'gave a comment at 100:100:100 on 100/100/100 to a post' refers to comments.CreationDate = '100/100/100 100:100:100'"]}, "18": {"question": "For the owner user of post No. 65041, what is his/her reputation points?", "GT_SQL": "SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041", "actual_evidence": ["post no. 65041 refers to Id = '65041'", " reputation point refers to Reputation"], "generic_evidence": ["'owner user of post No. 100' refers to posts.Id = '100'", "'what is his/her reputation points' refers to users.Reputation"]}, "19": {"question": "Give the number of votes for the post about data visualization.", "GT_SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data visualization%'", "actual_evidence": ["About data visualization is the Title that contains 'data visualization'"], "generic_evidence": ["'the post about data visualization' refers to posts.Title LIKE '%data visualization%'"]}, "20": {"question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?", "GT_SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'", "actual_evidence": ["\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post", " views refers to ViewCount"], "generic_evidence": ["'the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'' refers to posts.Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'", "'views of the post ' refers to posts.ViewCount"]}, "21": {"question": "Write all comments made on the post titled 'How does gentle boosting differ from AdaBoost?'", "GT_SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How does gentle boosting differ FROM AdaBoost?'", "actual_evidence": ["\"How does gentle boosing differ from AdaBoost?\" is the Title of post", " comments refers to Text"], "generic_evidence": ["'the post titled \"How does gentle boosting differ from AdaBoost?\"' refers to posts.Title = 'How does gentle boosting differ from AdaBoost?'", "'all comments made on the post' refers to comments.Text'"]}, "22": {"question": "Name 10 users with the badge name 'Necromancer.'", "GT_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10", "actual_evidence": ["\"Necromancer\" is the Name of badge", " users refers to DisplayName"], "generic_evidence": ["'badge name 'Necromancer'' refers to badges.Name = 'Necromancer'", "'users with the badge name' refers to users.DisplayName"]}, "23": {"question": "What is the total score of the posts edited by Yevgeny and include the user's website URL.", "GT_SQL": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.WebsiteUrl", "actual_evidence": ["\"Yevgeny\" is the DisplayName", " edited refers to LastEditorUserId"], "generic_evidence": ["'the posts edited by Yevgeny' refers to users.DisplayName = 'Yevgeny'", "'the posts edited' refers to posts.LastEditorUserId"]}, "24": {"question": "How much is the total bounty amount of the post titled about 'data'", "GT_SQL": "SELECT SUM(T2.BountyAmount) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%'", "actual_evidence": ["About data means the title contains 'data'", " total bounty Amount refers to Sum(BountyAmount)"], "generic_evidence": ["'the post titled about 'data'' refers to posts.Title LIKE '%data%'", "'the total bounty amount of the post titled about 'data'' refers to SUM(posts.BountyAmount)"]}, "25": {"question": "Which user added a bounty amount of 50 to the post titled 'Variance of a difference in marginal proportions in a three-way contingency table?'", "GT_SQL": "SELECT T3.DisplayName FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title = 'Variance of a difference in marginal proportions in a three-way contingency table'", "actual_evidence": ["\"Variance of a difference in marginal proportions in a three-way contingency table\" is the Title of post", " bounty amount of 50 refers to BountyAmount = 50", " user refers to DisplayName"], "generic_evidence": ["'the post titled 'Variance of a difference in marginal proportions in a three-way contingency table'' refers to posts.Title = 'Variance of a difference in marginal proportions in a three-way contingency table'", "'added a bounty amount of 50 ' refers to bounties.BountyAmount = 50", "'Which user added a bounty' refers to users.DisplayName"]}, "26": {"question": "Give the total number of comments posted by user ID 13.", "GT_SQL": "SELECT COUNT(Id) FROM comments WHERE UserId = 13", "actual_evidence": [], "generic_evidence": []}, "27": {"question": "How many users are awarded with supporter badge during year 2011?", "GT_SQL": "SELECT COUNT(Id) FROM badges WHERE STRFTIME('%Y', Date) = '2011' AND Name = 'Supporter'", "actual_evidence": ["\"Supporter\" is the Name of badge", " in year 2011 refers to year(Date) = 2011"], "generic_evidence": ["'users are awarded with supporter badge' refers to badges.Name = 'Supporter'", "'during year 100' refers to STRFTIME('%Y', badges.Date) = '100'"]}, "28": {"question": "How many users are awarded with more than 5 badges?", "GT_SQL": "SELECT UserId FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5", "actual_evidence": ["more than 5 badges refers to Count (Name) > 5", " user refers to UserId"], "generic_evidence": ["'awarded with more than 5 badges' refers to COUNT(badges.Name) > 5", "'users with badges' refers to badges.UserId "]}, "29": {"question": "Which users have posted the most comments. List out the user's badge?", "GT_SQL": "SELECT Name FROM badges AS T1 INNER JOIN comments AS T2 ON T1.UserId = t2.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.UserId) DESC LIMIT 1", "actual_evidence": ["user with the most comments refers to UserId where Max(Count(Id)"], "generic_evidence": ["'users who have posted the most comments' refers to GROUP BY comments.UserId ORDER BY COUNT(comments.UserId) DESC LIMIT 1"]}, "30": {"question": "What are the post history type IDs for post ID 3720 and how many users have commented on the post?", "GT_SQL": "SELECT T1.PostHistoryTypeId, COUNT(T2.UserId) FROM postHistory AS T1 INNER JOIN comments AS T2 ON T1.UserId = T2.UserId WHERE T1.PostId = 3720", "actual_evidence": [], "generic_evidence": []}, "31": {"question": "List out all post that are related to post ID 61217 and what is the popularity of this post?", "GT_SQL": "SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217", "actual_evidence": ["post related refers to RelatedPostId", " popularity refers to ViewCount"], "generic_evidence": ["'all post that are related to post ID 100' refers to posts.RelatedPostId = 100", "'what is the popularity of this post' refers to posts.ViewCount"]}, "32": {"question": "List out all post ID with score more than 60 and list out all the user ID that created these post.", "GT_SQL": "SELECT PostId, UserId FROM postHistory WHERE PostId IN ( SELECT Id FROM posts WHERE Score > 60 )", "actual_evidence": ["score more than 60 refers to Score > 60"], "generic_evidence": ["'post ID with score more than (100)' refers to posts.Score > 100", "'user ID that created these post' refers to posts.OwnerUserId"]}, "33": {"question": "What is the sum of favourite count gained by user ID 686 in 2011?", "GT_SQL": "SELECT SUM(DISTINCT FavoriteCount) FROM posts WHERE Id IN ( SELECT PostId FROM postHistory WHERE UserId = 686 AND STRFTIME('%Y', CreationDate) = '2011' )", "actual_evidence": ["in 2011 refers to year (CreatinDate) = 2011"], "generic_evidence": ["'the sum of favourite count gained by user ID (100) in (100)' refers to SUM(DISTINCT posts.FavoriteCount) WHERE postHistory.UserId = 100 AND STRFTIME('%Y', postHistory.CreationDate) = '100'"]}, "34": {"question": "How many users obtained the \"Announcer\" badge?", "GT_SQL": "SELECT COUNT(id) FROM badges WHERE Name = 'Announcer'", "actual_evidence": ["\"Announcer\" is the Name of badge", " user refers to UserId"], "generic_evidence": ["'users obtained the \"Announcer\" badge' refers to badges.Name = \"Announcer\"", "'How many users obtained badge' refers to COUNT(badges.id)"]}, "35": {"question": "State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM.", "GT_SQL": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47'", "actual_evidence": ["detailed content of the comment refers to Text", " created on 7/19/2010 7:39:08 PM refers to CreationDate = '2010-07-19 19:25:47'"], "generic_evidence": ["'the detailed content of the comment' refers to comments.Text", "'the comment which was created on 7/100/100 7:100:100 PM' refers to comments.CreationDate = '100-07-100 19:100:100'"]}, "36": {"question": "What are the names of badges that users who have the highest reputation obtained?", "GT_SQL": "SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation DESC LIMIT 1", "actual_evidence": ["highest reputation refers to Max(Reputation)", " user refers to UserId"], "generic_evidence": ["'badges that users who have the highest reputation obtained' refers to ORDER BY users.Reputation DESC LIMIT 1", "'that users who have' refers to badges.UserId"]}, "37": {"question": "Mention the reputation of users who had obtained the badge on 7/19/2010 7:39:08 PM.", "GT_SQL": "SELECT T1.Reputation FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08'", "actual_evidence": ["on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08'"], "generic_evidence": ["'the reputation of users who had obtained the badge on 7/100/100 7:100:100 PM' refers to badges.Date = '100-07-100 19:100:100'"]}, "38": {"question": "What is the comment's rating score of the post which was created on 7/19/2010 7:14:43 PM", "GT_SQL": "SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:14:43'", "actual_evidence": ["created on 7/19/2010 7:14:43 PM refers to CreationDate = '2010-07-19 19:14:43'"], "generic_evidence": ["'the post which was created on 7/100/100 7:100:100 PM' refers to posts.CreationDate = '100-07-100 19:100:100'"]}, "39": {"question": "List out the age of users who located in Vienna, Austria obtained the badge?", "GT_SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'", "actual_evidence": ["\"Vienna, Austria\" is the Location"], "generic_evidence": ["'users who located in Vienna, Austria' refers to users.Location = 'Vienna, Austria'"]}, "40": {"question": "How many adults who obtained the badge Supporter?", "GT_SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65", "actual_evidence": ["Supporter is the Name of badge", " adult refers to Age BETWEEN 19 AND 65"], "generic_evidence": ["'who obtained the badge Supporter' refers to badges.Name = 'Supporter'", "'adults who obtained the badge' refers to users.Age BETWEEN 19 AND 65"]}, "41": {"question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.", "GT_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'", "actual_evidence": ["\"Sharpie\" is the DisplayName of user", " user refers to UserId"], "generic_evidence": ["'the badge whose display name is \"Sharpie\" obtained' refers to badges.DisplayName = \"Sharpie\"", "'that the user obtained' refers to badges.UserId"]}, "42": {"question": "How many votes were made in 2010?", "GT_SQL": "SELECT COUNT(id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'", "actual_evidence": ["YEAR(CreationDate) = 2010"], "generic_evidence": ["'votes were made in 100' refers to YEAR(votes.CreationDate) = 100"]}, "43": {"question": "How many users were adult?", "GT_SQL": "SELECT COUNT(id) FROM users WHERE Age BETWEEN 19 AND 65", "actual_evidence": ["adult refers to user where Age BETWEEN 19 and 65"], "generic_evidence": ["'users were adult' refers to users.Age BETWEEN 19 and 65"]}, "44": {"question": "Which users have the highest number of views?", "GT_SQL": "SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )", "actual_evidence": ["users have the highest number of views refer to DisplayName where MAX(Views)"], "generic_evidence": ["'users have the highest number of views' refers to users.DisplayName WHERE users.Views = MAX(users.Views)"]}, "45": {"question": "What is the name of tags used by John Stauffer's?", "GT_SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Stauffer'", "actual_evidence": ["DisplayName = 'John Stauffer'"], "generic_evidence": ["'tags used by John Stauffer's' refers to T1.DisplayName = 'John Stauffer'"]}, "46": {"question": "How many votes were made by Harlan?", "GT_SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN votes AS T3 ON T3.PostId = T2.PostId WHERE T1.DisplayName = 'Harlan'", "actual_evidence": ["DisplayName = 'Harlan'"], "generic_evidence": ["'votes made by Harlan' refers to votes.DisplayName = 'Harlan'"]}, "47": {"question": "Which post by slashnick has the most answers count? State the post ID.", "GT_SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1", "actual_evidence": ["most answers count refers to MAX(AnswerCount)", " DisplayName = 'slashnick'"], "generic_evidence": ["'post has the most answers count' refers to ORDER BY posts.AnswerCount DESC LIMIT 1", "'the post by slashnick' refers to posts.DisplayName = 'slashnick'"]}, "48": {"question": "How many negative comments did Neil McGuigan get in his posts?", "GT_SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId INNER JOIN postHistory AS T3 ON T2.PostId = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T2.score < 60", "actual_evidence": ["Negative comment refers to score < 60", " DisplayName = 'Neil McGuigan'"], "generic_evidence": ["'negative comments' refers to comments.score < 60", "'Neil McGuigan get in his posts' refers to comments.DisplayName = 'Neil McGuigan'"]}, "49": {"question": "List all the name of users that obtained the Organizer Badges.", "GT_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'", "actual_evidence": ["name of users refers to DisplayName", " the Organizer Badges refer to badges where Name = 'Organizer'"], "generic_evidence": ["'that obtained the Organizer Badges' refers to badges.Name = 'Organizer'", "'name of users' refers to users.DisplayName"]}, "50": {"question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.", "GT_SQL": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'", "actual_evidence": ["DIVIDE(COUNT(PostId WHERE DisplayName = 'Community' and R language)), (COUNT(PostId WHERE DisplayName = 'Jay Stevens')) as percentage", " R language refers to tagname = 'r'"], "generic_evidence": ["'the percentage of posts that use the R language.' refers to CAST(SUM(IIF(tags.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(users.Id)", "'posts that use the R language' refers to posts.tagname = 'r'"]}, "51": {"question": "How many posts were created on 21st July, 2010?", "GT_SQL": "SELECT COUNT(id) FROM postHistory WHERE date(CreationDate) = '2010-07-21'", "actual_evidence": ["created on 21st July, 2010 refers to CreationDate BETWEEN '2010-07-21 00:00:00' and '2012-07-21 23:59:59'"], "generic_evidence": ["'posts were created on 21st July, 100' refers to date(posts.CreationDate) = '100-07-21'"]}, "52": {"question": "What are the display names and ages of user who got the highest in views?", "GT_SQL": "SELECT DisplayName, Age FROM users WHERE Views = ( SELECT MAX(Views) FROM users )", "actual_evidence": ["the highest in views refers to MAX(Views)"], "generic_evidence": ["'user who got the highest in views' refers to MAX(users.Views)"]}, "53": {"question": "How many negative comments were given by user ID 13?", "GT_SQL": "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60", "actual_evidence": ["negative comments refer to Score < 60"], "generic_evidence": ["'negative comments' refers to comments.Score < 60"]}, "54": {"question": "Provide the badge names received in 2011 for the user whose location is in the North Pole.", "GT_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'", "actual_evidence": ["received in 2011 refers to year(Date) = 2011"], "generic_evidence": ["'badge names received in 100 for the user whose location is in the North Pole' refers to STRFTIME('%Y', badges.Date) = '100' AND users.Location = 'North Pole'"]}, "55": {"question": "Describe the post history counts and last edit date of the post title \"What is the best introductory Bayesian statistics textbook?\"", "GT_SQL": "SELECT T1.Id, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'", "actual_evidence": [], "generic_evidence": []}, "56": {"question": "Provide the related post title of \"How to tell if something happened in a data set which monitors a value over time\".", "GT_SQL": "SELECT T1.RelatedPostId FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.Id = T1.PostId WHERE T2.Title = 'How to tell if something happened in a data set which monitors a value over time'", "actual_evidence": [], "generic_evidence": []}, "57": {"question": "List the post IDs and badge names of the user Samuel in 2013.", "GT_SQL": "SELECT T1.PostId, T2.Name FROM postHistory AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND STRFTIME('%Y', T1.CreationDate) = '2013' AND STRFTIME('%Y', T2.Date) = '2013'", "actual_evidence": ["Samuel refers to UserDisplayName", " YEAR(CreationDate) = 2013 relates to PostId", " YEAR(Date) = 2013 relates to the badge"], "generic_evidence": ["'the user Samuel' refers to users.UserDisplayName = 'Samuel'", "'post created in 100' refers to STRFTIME('%Y', posts.CreationDate) = '100'", "'the badge in 100' refers to STRFTIME('%Y', badges.Date) = '100'"]}, "58": {"question": "What is the owner's display name of the most popular post?", "GT_SQL": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1 )", "actual_evidence": ["Higher view count means the post has higher popularity", " the most popular post refers to MAX(ViewCount)"], "generic_evidence": ["'the most popular post' refers ORDER BY posts.ViewCount DESC LIMIT 1", "'owner's display name' refers to users.DisplayName"]}, "59": {"question": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag.", "GT_SQL": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'", "actual_evidence": ["user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing'"], "generic_evidence": ["'the user who owned the excerpt post with hypothesis-testing tag' refers to posts.OwnerUserId WHERE posts.TagName = 'hypothesis-testing'"]}, "60": {"question": "Write down the related posts titles and link type IDs of the post \"What are principal component scores?\".", "GT_SQL": "SELECT T2.RelatedPostId, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'What are principal component scores?'", "actual_evidence": ["Title = 'What are principal component scores?'"], "generic_evidence": ["'the post \"What are principal component scores?\"' refers to posts.Title = 'What are principal component scores?'"]}, "61": {"question": "How old is the most influential user?", "GT_SQL": "SELECT Age FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )", "actual_evidence": ["How old describes age", " the most influential refers to user where MAX(Reputation)"], "generic_evidence": ["'How old' refers to users.Age", "' the most influential user' refers to ORDER BY users.Reputation DESC LIMIT 1"]}, "62": {"question": "How many posts with votes that were created in 2011 have a bounty of 50?", "GT_SQL": "SELECT COUNT(Id) FROM votes WHERE BountyAmount = 50 AND STRFTIME('%Y', CreationDate) = '2011'", "actual_evidence": ["created in 2012 refers YEAR(CreationDate) = 2011", " BountyAmount = 50"], "generic_evidence": ["'posts that were created in 100' refers to STRFTIME('%Y', posts.CreationDate) = 100", "'posts with votes that have a bounty of 50' refers to votes.BountyAmount = 50"]}, "63": {"question": "What is the title of the post with the oldest post link?", "GT_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T2.PostId = T1.Id ORDER BY T1.CreaionDate LIMIT 1", "actual_evidence": ["the oldest post link refers to MIN(CreaionDate)"], "generic_evidence": ["'the post with the oldest post link' refers to ORDER BY postLinks.CreationDate LIMIT 1"]}, "64": {"question": "What is the display name of the user who acquired the highest amount of badges?", "GT_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1", "actual_evidence": ["highest amount of badges refers to MAX(COUNT(Name))"], "generic_evidence": ["'the user who acquired the highest amount of badges' refers to GROUP BY users.DisplayName ORDER BY COUNT(users.Id) DESC LIMIT 1"]}, "65": {"question": "When did \"chl\" cast its first vote in a post?", "GT_SQL": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1", "actual_evidence": ["DisplayName = 'chl'", " cast its first vote refers to MIN(CreationDate)"], "generic_evidence": ["'\"chl\" cast vote' refers to users.DisplayName = 'chl'", "cast its first vote in a post' refers to ORDER BY votes.CreationDate LIMIT 1"]}, "66": {"question": "What is the display name of the user who acquired the first Archeologist badge?", "GT_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Archeologist' ORDER BY T2.Date LIMIT 1", "actual_evidence": ["Archeologist is the name of the badge", " acquired the first refers to MIN(Date)"], "generic_evidence": ["'acquired the first Archeologist badge' refers to badges.Name = 'Archeologist'", "'the user who acquired the first badge' refers to ORDER BY badges.Date LIMIT 1"]}, "67": {"question": "What is the average number of posts voted by the oldest users?", "GT_SQL": "SELECT AVG(PostId) FROM votes WHERE UserId IN ( SELECT Id FROM users WHERE Age = ( SELECT MAX(Age) FROM users ) )", "actual_evidence": ["average number of posts voted refers to AVG(PostId) FROM votes", " the oldest users refer to MAX(Age)"], "generic_evidence": ["'average number of posts voted' refers to AVG(votes.PostId)", "'the oldest users' refers to MAX(users.Age)"]}, "68": {"question": "Who has the highest reputation? Please give the display name.", "GT_SQL": "SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )", "actual_evidence": ["the highest reputation refers to MAX(Reputation)"], "generic_evidence": ["'Who has the highest reputation' refers to ORDER BY users.Reputation DESC LIMIT 1"]}, "69": {"question": "Please list all display names of users who are adults.", "GT_SQL": "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65", "actual_evidence": ["adults refer to users where Age BETWEEN 19 and 65"], "generic_evidence": ["'users who are adults' refers to users.Age BETWEEN 19 and 65"]}, "70": {"question": "How many posts did Jay Stevens have in 2010?", "GT_SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' AND T1.DisplayName = 'Jay Stevens'", "actual_evidence": ["DisplayName = 'Jay Stevens'", " in 2010 refers to YEAR(CreationDate) = 2010"], "generic_evidence": ["'posts did Jay Stevens have' refers to posts.DisplayName = 'Jay Stevens'", "'posts in (100)' refers to STRFTIME('%Y', posts.CreationDate) = 100"]}, "71": {"question": "Which post has the highest score? Please give its id and title's name.", "GT_SQL": "SELECT T1.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T2.Score DESC LIMIT 1", "actual_evidence": ["the highest score refers to MAX(Score)", " owner's name refers to DisplayName"], "generic_evidence": ["'post has the highest score' refers to ORDER BY posts.Score DESC LIMIT 1", "'id and title's name' refers to users.Id, posts.Title"]}, "72": {"question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it.", "GT_SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'", "actual_evidence": ["views refer to ViewCount", " Name the user refers to DisplayName", " Text = 'Computer Game Datasets'"], "generic_evidence": ["'total views' refers to posts.ViewCount", "'Name the user who posted it' refers to users.DisplayName", "'the post 'Computer Game Datasets'' refers to posts.Text = 'Computer Game Datasets'"]}, "73": {"question": "Identify the total number of posts with views above average.", "GT_SQL": "SELECT Id FROM posts WHERE ViewCount > ( SELECT AVG(ViewCount) FROM posts )", "actual_evidence": ["views above average refer to ViewCount > AVG(ViewCount)"], "generic_evidence": ["'posts with views above average' refers to posts.ViewCount > (SELECT AVG(ViewCount) FROM posts)"]}, "74": {"question": "How many comments were added to the post with the highest score?", "GT_SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY SUM(T1.Score) DESC LIMIT 1", "actual_evidence": ["the highest score refers to MAX(Score)"], "generic_evidence": ["'the post with the highest score' refers to ORDER BY SUM(posts.Score) DESC LIMIT 1"]}, "75": {"question": "Identify the number of posts that have been viewed over 35000 times but have received no comments from other users.", "GT_SQL": "SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0", "actual_evidence": ["have been viewed over 35000 times refers to ViewCount > 35000", " received no comments refers to CommentCount = 0"], "generic_evidence": ["'posts that have been viewed over 100 times' refers to posts.ViewCount > 100", "'posts have received no comments' refers to posts.CommentCount = 0"]}, "76": {"question": "Identify the latest badge awarded to the user with the display name Emmett.", "GT_SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1", "actual_evidence": ["the latest badge refers to Name FROM badges where MAX(Date)"], "generic_evidence": ["'the latest badge awarded' refers to ORDER BY badges.Date DESC LIMIT 1"]}, "77": {"question": "Identify the number of adult users who have cast over 5000 upvotes.", "GT_SQL": "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000", "actual_evidence": ["adult users refer to Age BETWEEN 19 and 65", " over 5000 upvotes refer to UpVotes > 5000"], "generic_evidence": ["'adult users' refers to users.Age BETWEEN 19 and 65", "'who have cast over 5000 upvotes' refers to users.UpVotes > 5000"]}, "78": {"question": "Identify the number of posts and comments left by the user, who has the latest created user account.", "GT_SQL": "SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T3.PostId = T2.Id ORDER BY T1.CreationDate DESC LIMIT 1", "actual_evidence": ["the latest created user account refers to MAX(CreationDate)"], "generic_evidence": ["'the user who has the latest created user account' refers to ORDER BY users.CreationDate DESC LIMIT 1"]}, "79": {"question": "Provide the text of the latest comment to the post with the title 'Analysing wind data with R' and the display name of the user who left it.", "GT_SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 1", "actual_evidence": ["the latest comment refers to MAX(CreationDate)"], "generic_evidence": ["'the latest comment to the post' refers to ORDER BY users.CreationDate DESC LIMIT 1"]}, "80": {"question": "Count the number of posts with a tag specified as 'careers'.", "GT_SQL": "SELECT COUNT(Id) FROM tags WHERE TagName = 'careers'", "actual_evidence": ["tag specified as 'careers' refers to TagName = 'careers'"], "generic_evidence": ["'posts with a tag specified as 'careers'' refers to posts.TagName = 'careers'"]}, "81": {"question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?", "GT_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'", "actual_evidence": [], "generic_evidence": []}, "82": {"question": "Among all the posts posted by the most influential user, identify the percentage with a score above 50.", "GT_SQL": "SELECT CAST(SUM(CASE WHEN T2.Score >= 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation", "actual_evidence": ["The user with higher reputation has more influence", " DIVIDE(COUNT(stats_posts.Id where Score > = 50 and MAX(Reputation))), COUNT(stats_posts.Id where MAX(Reputation)) as percentage"], "generic_evidence": ["'posted by the most influential user' refers to MAX(users.Reputation)", "'identify the percentage with a score above 50' refers to CAST(SUM(CASE WHEN posts.Score >= 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(users.Id)"]}, "83": {"question": "How many posts have a score less than 20?", "GT_SQL": "SELECT COUNT(id) FROM posts WHERE Score < 20", "actual_evidence": ["score less than 20 refers to Score < 20"], "generic_evidence": ["'posts have a score less than 100' refers to posts.Score < 100"]}, "84": {"question": "Among the tags with tag ID below 15, how many of them have 20 count of posts and below?", "GT_SQL": "SELECT COUNT(id) FROM tags WHERE Count <= 20 AND Id < 15", "actual_evidence": ["ID below 15 refers to Id < 15", " have 20 count of posts and below refers to Count < = 20"], "generic_evidence": ["'tags with tag ID below (100)' refers to tags.Id < 100", "'tags that have (100) count of posts and below' refers to tags.Count <= 100"]}, "85": {"question": "Give the texts commented on the post titled \"How can I adapt ANOVA for binary data?\".", "GT_SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How can I adapt ANOVA for binary data?'", "actual_evidence": ["Title = 'How can I adapt ANOVA for binary data?'"], "generic_evidence": ["'the post titled \"How can I adapt ANOVA for binary data?\"' refers to posts.Title = 'How can I adapt ANOVA for binary data?'"]}, "86": {"question": "Among the posts with views ranging from 100 to 150, what is the comment with the highest score?", "GT_SQL": "SELECT Text FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) ORDER BY Score DESC LIMIT 1", "actual_evidence": ["views ranging from 100 to 150 refers to ViewCount BETWEEN 100 and 150", " comment with the highest score refers to Text where MAX(Score)"], "generic_evidence": ["'posts with views ranging from 100 to 150' refers to posts.ViewCount BETWEEN 100 and 150", "'comment with the highest score' refers to ORDER BY comments.Score DESC LIMIT 1"]}, "87": {"question": "List the creation date and age of the user that commented \"@Jason Punyon in particular gets a humorless downvote for removing my \"verboten\" tag! ;-)\".", "GT_SQL": "SELECT T2.CreationDate, T2.Age FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.text = '@Jason Punyon in particular gets a humorless downvote for removing my \"verboten\" tag! -)'", "actual_evidence": ["Text = '@Jason Punyon in particular gets a humorless downvote for removing my \"verboten\" tag! ", "-)'"], "generic_evidence": ["'the user that commented \"@Jason Punyon in particular gets a humorless downvote for removing my \"verboten\" tag! ;-)\"' refers to comments.Text = '@Jason Punyon in particular gets a humorless downvote for removing my \"verboten\" tag! ;-)'", "'creation date and age of the user' refers to users.CreationDate, users.Age"]}, "88": {"question": "In comments with 0 score, how many of the posts have view count lower than 5?", "GT_SQL": "SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount < 5 AND T2.Score = 0", "actual_evidence": ["view count lower than 5 refers to ViewCount < 5"], "generic_evidence": ["'posts have view count lower than (100)' refers to posts.ViewCount < 100"]}, "89": {"question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?", "GT_SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'", "actual_evidence": ["Title = 'Group differences on a five point Likert item'"], "generic_evidence": ["'the post titled by \"Group differences on a five point Likert item\"' refers to posts.Title = 'Group differences on a five point Likert item'"]}, "90": {"question": "What is the up vote number of the user that commented \"R is also lazy evaluated.\"?", "GT_SQL": "SELECT T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'R is also lazy evaluated.'", "actual_evidence": ["commented \"R is also lazy evaluated.\" refers to Text of the comment"], "generic_evidence": ["'the user that commented \"R is also lazy evaluated.\"' refers to comments.Text = \"R is also lazy evaluated.\""]}, "91": {"question": "List the comments commented by the user with a username of \"Random\".", "GT_SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Random'", "actual_evidence": ["comments refer to Text", " username of \"Random\" refers to DisplayName = 'Random'"], "generic_evidence": ["'comments commented' refers to comments.Text", "'the user with a username of \"Random\"' refers to comments.DisplayName = 'Random'"]}, "92": {"question": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?", "GT_SQL": "SELECT CAST(SUM(IIF(T1.UpVotes = 0, 1, 0)) AS REAL) / COUNT(T1.Id) AS per FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score BETWEEN 5 AND 10", "actual_evidence": ["DIVIDE(COUNT(UserId where UpVotes = 0 and Score BETWEEN 5 and 10)), (COUNT(UserId where Score BETWEEN 5 and 10)) as percentage"], "generic_evidence": ["'the percentage of the users with 0 up votes' refers to CAST(SUM(IIF(users.UpVotes = 0, 1, 0)) AS REAL) / COUNT(users.Id)"]}}