{
    "0": {
        "question": "Please list all the superpowers of 3-D Man.",
        "GT_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
        "actual_evidence": [
            "3-D Man refers to superhero_name = '3-D Man'",
            " superpowers refers to power_name"
        ],
        "generic_evidence_automated": [
            "'all the superpowers of 3-D Man' refers to superhero.power_name",
            "'all the superpowers of 3-D Man' refers to superpower.power_name"
        ],
        "generic_evidence": [
            "'3-D Man' refers to superhero.superhero_name = '3-D Man'",
            "'all the superpowers' refers to superpower.power_name"
        ]
    },
    "1": {
        "question": "How many superheroes have the super power of \"Super Strength\"?",
        "GT_SQL": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength'",
        "actual_evidence": [
            "super power of \"Super Strength\" refers to power_name = 'Super Strength'"
        ],
        "generic_evidence_automated": [
            "'have the super power of \"Super Strength\"' refers to COUNT(hero_power.hero_id) WHERE superpower.power_name = 'Super Strength'"
        ],
        "generic_evidence": [
            "super power of Super Strength refers to superpower.power_name = 'Super Strength'"
        ]
    },
    "2": {
        "question": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?",
        "GT_SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
        "actual_evidence": [
            "super power of \"Super Strength\" refers to power_name = 'Super Strength'",
            " a height of over 200cm refers to height_cm > 200"
        ],
        "generic_evidence_automated": [
            "superheroes with the super power of \"Super Strength\" refers to T3.power_name = 'Super Strength'",
            "'with the super power of \"Super Strength\", how many of them have a height of over {100}' refers to T1.height_cm > 100"
        ],
        "generic_evidence": [
            "super power of Super Strength refers to superpower.power_name = 'Super Strength'",
            "'height of over {100} cm' refers to superhero.height_cm > 100"
        ]
    },
    "3": {
        "question": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?",
        "GT_SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'",
        "actual_evidence": [
            "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id",
            " super power of \"Agility\" refers to power_name = 'Agility'"
        ],
        "generic_evidence_automated": [
            "'have the super power of \"Agility\"' refers to COUNT(superhero.id) WHERE superpower.power_name = 'Agility'",
            "'have the super power of \"Agility\"' refers to COUNT(superhero.id) WHERE superpower.power_name = 'Agility'"
        ],
        "generic_evidence": [
            "'superheroes with blue eyes' refers to colour.colour = 'Blue'",
            "'super power of Agility' refers to superpower.power_name = 'Agility'"
        ]
    },
    "4": {
        "question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
        "GT_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
        "actual_evidence": [
            "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id",
            " blond hair refers to colour = 'Blond' and hair_colour_id = colour.id",
            " super power of \"Agility\" refers to power_name = 'Agility'"
        ],
        "generic_evidence_automated": [
            "'all the superheroes that have blue eyes and blond hair' refers to T1.superhero_name FROM superhero INNER JOIN colour AS T2 ON superhero.eye_colour_id = T2.id INNER JOIN colour AS T3 ON superhero.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
            "'all the superheroes that have blue eyes and blond hair' refers to T1.superhero_name FROM superhero INNER JOIN colour AS T2 ON superhero.eye_colour_id = T2.id INNER JOIN colour AS T3 ON superhero.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
            "\"superheroes that have blue eyes and blond hair\" refers to T1.superhero_name FROM superhero INNER JOIN colour AS T2 ON superhero.eye_colour_id = T2.id INNER JOIN colour AS T3 ON superhero.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'"
        ],
        "generic_evidence": [
            "'superheroes that have blue eyes' refers to colour.colour = 'Blue'",
            "'superheroes that have blond hair' refers to colour.colour = 'Blond'"
        ]
    },
    "5": {
        "question": "How many superheroes are published by Marvel Comics?",
        "GT_SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
        "actual_evidence": [
            "published by Marvel Comics refers to publisher_name = 'Marvel Comics'"
        ],
        "generic_evidence_automated": [
            "'published by Marvel Comics' refers to publisher.publisher_name = 'Marvel Comics'"
        ],
        "generic_evidence": [
            "'published by Marvel Comics' refers to publisher.publisher_name = 'Marvel Comics'"
        ]
    },
    "6": {
        "question": "Please give the full name of the tallest hero published by Marvel Comics.",
        "GT_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC LIMIT 1",
        "actual_evidence": [
            "the tallest hero refers to MAX(height_cm)",
            "published by Marvel Comics refers to publisher_name = 'Marvel Comics'"
        ],
        "generic_evidence_automated": [
            "the full name of the tallest hero published by Marvel Comics refers to superhero.full_name ORDER BY superhero.height_cm DESC LIMIT 1",
            "The full name of the tallest hero published by Marvel Comics refers to superhero.full_name ORDER BY superhero.height_cm DESC LIMIT 1"
        ],
        "generic_evidence": [
            "'the tallest hero' refers to ORDER BY superhero.height_cm DESC LIMIT 1",
            "'published by Marvel Comics' refers to publisher.publisher_name = 'Marvel Comics'"
        ]
    },
    "7": {
        "question": "Who is the publisher of Sauron?",
        "GT_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
        "actual_evidence": [
            "the publisher refers to publisher_name",
            " Sauron refers to superhero_name = 'Sauron'"
        ],
        "generic_evidence_automated": [
            "the publisher of Sauron refers to publisher_name",
            "'Sauron' refers to superhero.superhero_name = 'Sauron'"
        ],
        "generic_evidence": [
            "'the publisher' refers to publisher.publisher_name",
            "'superhero Sauron' refers to superhero.superhero_name = 'Sauron'"
        ]
    },
    "8": {
        "question": "Among the superheroes from Marvel Comics, how many of them have blue eyes?",
        "GT_SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Blue'",
        "actual_evidence": [
            "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'",
            " blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id"
        ],
        "generic_evidence_automated": [
            "the superheroes from Marvel Comics have blue eyes refers to COUNT(superhero.id) WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Blue'",
            "'blue eyes' refers to colour = 'Blue' and eye_colour_id = colour.id"
        ],
        "generic_evidence": [
            "'the superheroes from Marvel Comics' refers to publisher.publisher_name = 'Marvel Comics'",
            "'blue eyes' refers to colour.colour = 'Blue'"
        ]
    },
    "9": {
        "question": "What is the average height of the superheroes from Marvel Comics?",
        "GT_SQL": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
        "actual_evidence": [
            "superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'",
            " average height of the superheroes refers to AVG(height_cm)"
        ],
        "generic_evidence_automated": [
            "'height of the superheroes from Marvel Comics' refers to AVG(superhero.height_cm)",
            "'average height of the superheroes' refers to AVG(superhero.height_cm)"
        ],
        "generic_evidence": [
            "'superheroes from Marvel Comics' refers to publisher.publisher_name = 'Marvel Comics'",
            "'average height of the superheroes' refers to AVG(superhero.height_cm)"
        ]
    },
    "10": {
        "question": "Among the superheroes from Marvel Comics, what is the percentage of those who have the super power of \"Super Strength\"?",
        "GT_SQL": "SELECT CAST(COUNT(CASE WHEN T3.power_name = 'Super Strength' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN publisher AS T4 ON T1.publisher_id = T4.id WHERE T4.publisher_name = 'Marvel Comics'",
        "actual_evidence": [
            "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'",
            " Calculation = MULTIPLY(DIVIDE(SUM(power_name = 'Super Strength'), COUNT(id)), 100)",
            " super power of \"Super Strength\" refers to power_name = 'Super Strength'"
        ],
        "generic_evidence_automated": [
            "the super power of \"Super Strength\" refers to COUNT(CASE WHEN superpower.power_name = 'Super Strength' THEN superhero.id ELSE NULL END)",
            "'percentage of those who have the super power of \"Super Strength\"' refers to CAST(COUNT(CASE WHEN superpower.power_name = 'Super Strength' THEN superhero.id ELSE NULL END) AS REAL) * 100 / COUNT(superhero.id)",
            "'percentage of those who have the super power of \"Super Strength\"' refers to CAST(COUNT(CASE WHEN superpower.power_name = 'Super Strength' THEN superhero.id ELSE NULL END) AS REAL) * 100 / COUNT(superhero.id)"
        ],
        "generic_evidence": [
            "'superheroes from Marvel Comics' refers to publisher.publisher_name = 'Marvel Comics'",
            "'percentage of superheroes who have the super power of Super Strength' refers to CAST(COUNT(CASE WHEN superpower.power_name = 'Super Strength' THEN superhero.id ELSE NULL END) AS REAL) * 100 / COUNT(superhero.id)"
        ]
    },
    "11": {
        "question": "What is the publisher's name of Blue Beetle II?",
        "GT_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
        "actual_evidence": [
            "Blue Beetle II refers to superhero_name = 'Blue Beetle II'"
        ],
        "generic_evidence_automated": [
            "The publisher's name of Blue Beetle II refers to publisher.publisher_name for superhero.superhero_name = 'Blue Beetle II'."
        ],
        "generic_evidence": [
            "'Superhero Blue Beetle II' refers to superhero.superhero_name = 'Blue Beetle II'"
        ]
    },
    "12": {
        "question": "What is Copycat's race?",
        "GT_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
        "actual_evidence": [
            "Copycat is the superhero_name"
        ],
        "generic_evidence_automated": [
            "Copycat's race refers to race.race for superhero.superhero_name = 'Copycat'"
        ],
        "generic_evidence": [
            "'Copycat' refers to superhero.superhero_name = 'Copycat'"
        ]
    },
    "13": {
        "question": "How many superheroes have durability of less than 50?",
        "GT_SQL": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Durability' AND T1.attribute_value < 50",
        "actual_evidence": [
            "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50"
        ],
        "generic_evidence_automated": [
            "durability of less than {100} refers to attribute_name = 'Durability' AND attribute_value < {100}"
        ],
        "generic_evidence": [
            "'durability of less than {100}' refers to hero_attribute.attribute_value < 100",
            "'superheroes who have durability' refers to attribute.attribute_name = 'Durability'"
        ]
    },
    "14": {
        "question": "How many female superheroes have a strength value of 100?",
        "GT_SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T4.gender = 'Female'",
        "actual_evidence": [
            "female refers to gender = 'Female'",
            " strength value of 100 refers to attribute_name = 'Strength' AND attribute_value = 100"
        ],
        "generic_evidence_automated": [
            "'female superheroes have a strength value of {100}' refers to COUNT(superhero.id) WHERE attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = {100} AND gender.gender = 'Female'",
            "'female superheroes have a strength value of {100}' refers to COUNT(superhero.id) WHERE attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = {100} AND gender.gender = 'Female'"
        ],
        "generic_evidence": [
            "'female' refers to gender.gender = 'Female'",
            "'superheroes who have a strength value of {100}' refers to attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = 100"
        ]
    },
    "15": {
        "question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.",
        "GT_SQL": "SELECT CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*), COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'",
        "actual_evidence": [
            "published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
            " superheroes who act in their own self-interest or make decisions based on their own moral code refers to alignment = 'Bad'",
            " calculation = MULTIPLY(DIVIDE(SUM(alignment = 'Bad)",
            " count(id)), 100)"
        ],
        "generic_evidence_automated": [
            "'percentage of superheroes who act in their own self-interest or make decisions based on their own moral code' refers to CAST(SUM(CASE WHEN alignment.alignment = 'Bad' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)",
            "'percentage of superheroes who act in their own self-interest or make decisions based on their own moral code' refers to CAST(SUM(CASE WHEN alignment.alignment = 'Bad' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)",
            "'percentage of superheroes who act in their own self-interest or make decisions based on their own moral code' refers to CAST(SUM(CASE WHEN alignment.alignment = 'Bad' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)",
            "The percentage of superheroes who act in their own self-interest or make decisions based on their own moral code refers to CAST(SUM(CASE WHEN T3.alignment = 'Bad' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*), COUNT(*) from superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON alignment.id = superhero.alignment_id."
        ],
        "generic_evidence": [
            "'published by Marvel Comics' refers to publisher.publisher_name = 'Marvel Comics'",
            "'superheroes who act in their own self-interest or make decisions based on their own moral code' refers to alignment.alignment = 'Bad'",
            "'percentage of superheroes who act in their own self-interest or make decisions based on their own moral code' refers to CAST(SUM(CASE WHEN alignment.alignment = 'Bad' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)"
        ]
    },
    "16": {
        "question": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.",
        "GT_SQL": "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
        "actual_evidence": [
            "DC refers to publisher_name = 'DC Comics'",
            " Marvel Comics refers to publisher_name = 'Marvel Comics'",
            " calculation = SUBTRACT(SUM(publisher_name = 'Marvel Comics'), SUM(publisher_name = 'DC Comics'))"
        ],
        "generic_evidence_automated": [
            "'published more superheroes' refers to SUM(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END)",
            "'published more superheroes' refers to SUM(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END)",
            "'published more superheroes' refers to SUM(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END)"
        ],
        "generic_evidence": [
            "'DC comics' refers to publisher.publisher_name = 'DC Comics'",
            "'Marvel comics' refers to publisher.publisher_name = 'Marvel Comics'",
            "'difference in the number of superheroes DC and Marvel have published refers to SUM(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END)"
        ]
    },
    "17": {
        "question": "Calculate the average attribute value of all superheroes.",
        "GT_SQL": "SELECT AVG(attribute_value) FROM hero_attribute",
        "actual_evidence": [
            "average attribute value of all superheroes refers to AVG(attribute_value)"
        ],
        "generic_evidence_automated": [
            "average attribute value of all superheroes refers to AVG(hero_attribute.attribute_value)"
        ],
        "generic_evidence": [
            "attribute value refers to hero_attribute.attribute_value"
        ]
    },
    "18": {
        "question": "What is the total number of superheroes without full name?",
        "GT_SQL": "SELECT COUNT(id) FROM superhero WHERE full_name IS NULL",
        "actual_evidence": [
            "superheroes without full name refers to full_name IS NULL"
        ],
        "generic_evidence_automated": [
            "'total number of superheroes without full name' refers to COUNT(superhero.id) WHERE superhero.full_name IS NULL"
        ],
        "generic_evidence": [
            "'full name of superheroes' refers to superhero.full_name"
        ]
    },
    "19": {
        "question": "List down at least five superpowers of male superheroes.",
        "GT_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5",
        "actual_evidence": [
            "male refers to gender = 'Male'",
            " superpowers refers to power_name"
        ],
        "generic_evidence_automated": [
            "'superpowers of male superheroes' refers to superhero.superhero_name WHERE gender.gender = 'Male' LIMIT 5",
            "'superpowers of male superheroes' refers to superpower.power_name"
        ],
        "generic_evidence": [
            "'male' refers to gender.gender = 'Male'",
            "'superpowers' refers to superpower.power_name"
        ]
    },
    "20": {
        "question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.",
        "GT_SQL": "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour LIKE 'No Colour'",
        "actual_evidence": [
            "height from 170 to 190 refers to height_cm BETWEEN 170 AND 190",
            " no eye color refers to eye_colour_id = 1"
        ],
        "generic_evidence_automated": [
            "'no eye color' refers to T2.colour LIKE 'No Colour'",
            "'no eye color' refers to T2.colour LIKE 'No Colour'"
        ],
        "generic_evidence": [
            "height from {100} to {100} refers to superhero.height_cm BETWEEN 100 AND 100",
            "'no eye color' refers to T2.colour LIKE 'No Colour'"
        ]
    },
    "21": {
        "question": "List down at least five full name of Demi-God superheroes.",
        "GT_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
        "actual_evidence": [
            "Demi-God superheroes refers to race = 'Demi-God'"
        ],
        "generic_evidence_automated": [
            "'full name of Demi-God superheroes' refers to superhero.full_name WHERE race.race = 'Demi-God'"
        ],
        "generic_evidence": [
            "'Demi-God superheroes' refers to race.race = 'Demi-God'",
            "'full name of superheroes' refers to superhero.full_name"
        ]
    },
    "22": {
        "question": "Among the male superheroes, list the full names of superheroes with weight greater than the 79% average weight of all superheroes.",
        "GT_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79",
        "actual_evidence": [
            "male refers to gender_id = 1",
            " calculation = weight_kg > MULTIPLY(AVG(weight_kg), 0.79)"
        ],
        "generic_evidence_automated": [
            "'weight greater than the 79% average weight of all superheroes' refers to T1.weight_kg * 100 > ( SELECT AVG(superhero.weight_kg) FROM superhero ) * 79",
            "'weight greater than the 79% average weight of all superheroes' refers to 'weight_kg * 100 > AVG(superhero.weight_kg) * 79'"
        ],
        "generic_evidence": [
            "'male superheroes' refers to gender.gender = 'Male'",
            "'weight greater than the {100}% average weight of all superheroes' refers to superhero.weight_kg * 100 > ( SELECT AVG(superhero.weight_kg) FROM superhero ) * 100"
        ]
    },
    "23": {
        "question": "Indicate the attribute value of superhero Abomination.",
        "GT_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
        "actual_evidence": [
            "Abomination refers to superhero_name = 'Abomination'"
        ],
        "generic_evidence_automated": [
            "'superhero Abomination' refers to T1.superhero_name = 'Abomination'"
        ],
        "generic_evidence": [
            "'superhero Abomination' refers to superhero.superhero_name = 'Abomination'"
        ]
    },
    "24": {
        "question": "What are the superpowers of heroes with ID 1?",
        "GT_SQL": "SELECT DISTINCT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1",
        "actual_evidence": [
            "superpowers refers to power_name",
            " heroes with ID 1 refers to hero_id = 1"
        ],
        "generic_evidence_automated": [
            "'superpowers' refers to T2.power_name",
            "'superpowers of heroes with ID 1' refers to superpower.power_name WHERE hero_power.hero_id = 1"
        ],
        "generic_evidence": [
            "'superpowers' refers to superpower.power_name",
            "'heroes with ID 1' refers to hero_power.hero_id = 1"
        ]
    },
    "25": {
        "question": "What is the average of superheroes with no skin colour?",
        "GT_SQL": "SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id",
        "actual_evidence": [
            " no skin colour refers to skin_colour_id WHERE colour.id = 1",
            "average = DIVIDE(COUNT(superhero.id), SUM(skin_colour_id = 1))"
        ],
        "generic_evidence_automated": [
            "'average of superheroes with no skin colour' refers to CAST(COUNT(*) AS REAL) / SUM(CASE WHEN colour.id = 1 THEN 1 ELSE 0 END)",
            "'no skin colour' refers to CASE WHEN T2.id = 1 THEN 1 ELSE 0 END"
        ],
        "generic_evidence": [
            "'no skin colour' refers to superhero.skin_colour_id = 1"
        ]
    },
    "26": {
        "question": "Which superhero has the most durability published by Dark Horse Comics?",
        "GT_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' ORDER BY T2.attribute_value DESC LIMIT 1",
        "actual_evidence": [
            "which superhero refers to superhero_name",
            " published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics'",
            " most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'"
        ],
        "generic_evidence_automated": [
            "\"most durability published by Dark Horse Comics\" refers to ORDER BY T2.attribute_value DESC LIMIT 1",
            "'most durability' refers to MAX(attribute.attribute_value) WHERE attribute.attribute_name = 'durability'",
            "Which superhero has the most durability published by Dark Horse Comics? refers to ORDER BY T2.attribute_value DESC LIMIT 1"
        ],
        "generic_evidence": [
            "'which superhero' refers to superhero.superhero_name",
            "published by Dark Horse Comics refers to publisher.publisher_name = 'Dark Horse Comics'"
        ]
    },
    "27": {
        "question": "What is the eyes colour of Abraham Sapien?",
        "GT_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
        "actual_evidence": [
            "eye colour refers to colour.colour where eye_colour_id = colour.id",
            " Abraham Sapien is the full name of superhero"
        ],
        "generic_evidence_automated": [
            "The eye colour of Abraham Sapien refers to colour.colour where superhero.eye_colour_id = colour.id.",
            "The eye colour of Abraham Sapien refers to colour.colour for superhero.full_name = 'Abraham Sapien'."
        ],
        "generic_evidence": [
            "'eye colour' refers to colour.colour",
            "'Superhero Abraham Sapien' refers to superhero.full_name = 'Abraham Sapien'."
        ]
    },
    "28": {
        "question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
        "GT_SQL": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'",
        "actual_evidence": [
            "eyes refers to eye_colour_id",
            " hair refers to hair_colour_id",
            " skin colour refers to skin_colour_id",
            " female superheroes refers to gender = 'Female'",
            " published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics'"
        ],
        "generic_evidence_automated": [
            "'all female superheroes published by Dark Horse Comics' refers to superhero.eye_colour_id, superhero.hair_colour_id, superhero.skin_colour_id from superhero INNER JOIN publisher ON publisher.id = superhero.publisher_id INNER JOIN gender ON gender.id = superhero.gender_id WHERE publisher.publisher_name = 'Dark Horse Comics' AND gender.gender = 'Female'",
            "'all female superheroes published by Dark Horse Comics' refers to T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id from superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics') AND gender_id = (SELECT id FROM gender WHERE gender = 'Female')",
            "'all female superheroes published by Dark Horse Comics' refers to superhero.eye_colour_id, superhero.hair_colour_id, superhero.skin_colour_id from superhero INNER JOIN publisher ON publisher.id = superhero.publisher_id INNER JOIN gender ON gender.id = superhero.gender_id WHERE publisher.publisher_name = 'Dark Horse Comics' AND gender.gender = 'Female'",
            "'all female superheroes published by Dark Horse Comics' refers to superhero.eye_colour_id, superhero.hair_colour_id, superhero.skin_colour_id from superhero INNER JOIN publisher ON publisher.id = superhero.publisher_id INNER JOIN gender ON gender.id = superhero.gender_id WHERE publisher.publisher_name = 'Dark Horse Comics' AND gender.gender = 'Female'",
            "'all female superheroes published by Dark Horse Comics' refers to superhero.eye_colour_id, superhero.hair_colour_id, superhero.skin_colour_id from superhero INNER JOIN publisher ON publisher.id = superhero.publisher_id INNER JOIN gender ON gender.id = superhero.gender_id WHERE publisher.publisher_name = 'Dark Horse Comics' AND gender.gender = 'Female'"
        ],
        "generic_evidence": [
            "'List the eyes' refers to superhero.eye_colour_id",
            "'List the hair' refers to superhero.hair_colour_id",
            "'List the skin colour' refers to superhero.skin_colour_id",
            "'female superheroes' refers to gender.gender = 'Female'",
            "'published by Dark Horse Comics' refers to publisher.publisher_name = 'Dark Horse Comics'"
        ]
    },
    "29": {
        "question": "Which group does superhero A-Bomb belong to?",
        "GT_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
        "actual_evidence": [
            "group refers to race",
            " A-Bomb refers to superhero_name = 'A-Bomb'"
        ],
        "generic_evidence_automated": [
            "'superhero A-Bomb belong to' refers to superhero.race WHERE superhero.superhero_name = 'A-Bomb'",
            "'superhero A-Bomb' refers to superhero.superhero_name = 'A-Bomb'"
        ],
        "generic_evidence": [
            "'Which group' refers to race.race",
            "'superhero A-Bomb' refers to superhero.superhero_name = 'A-Bomb'"
        ]
    },
    "30": {
        "question": "Provide the hero name and race of Charles Chandler.",
        "GT_SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
        "actual_evidence": [
            "hero name refers to superhero_name",
            " Charles Chandler is the full name of superhero"
        ],
        "generic_evidence_automated": [
            "The hero name and race of Charles Chandler refers to superhero.superhero_name, race.race",
            "The full name of Charles Chandler refers to T1.full_name = 'Charles Chandler'."
        ],
        "generic_evidence": [
            "'Provide the race' refers to race.race",
            "'The hero name Charles Chandler' refers to superhero.superhero_name = 'Charles Chandler"
        ]
    },
    "31": {
        "question": "List the powers of Hunter Zolomon.",
        "GT_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'",
        "actual_evidence": [
            "Hunter Zolomon is the full name of superhero",
            " list the powers refers to power_name"
        ],
        "generic_evidence_automated": [
            "The full name of the superhero refers to T1.full_name = 'Hunter Zolomon'.",
            "'list the powers' refers to T3.power_name"
        ],
        "generic_evidence": [
            "'superhero Hunter Zolomon' refers to superhero.full_name = 'Hunter Zolomon'.",
            "'list the powers' refers to superpower.power_name"
        ]
    },
    "32": {
        "question": "Provide the heights of the heroes whose eye colours are amber.",
        "GT_SQL": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'",
        "actual_evidence": [
            "heights of the heroes refers to height_cm",
            " eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id"
        ],
        "generic_evidence_automated": [
            "'heights of the heroes whose eye colours are amber' refers to superhero.height_cm",
            "'eye colours are amber' refers to T2.colour = 'Amber' WHERE T1.eye_colour_id = T2.id"
        ],
        "generic_evidence": [
            "'heights of the heroes' refers to superhero.height_cm",
            "'eye colours are amber' refers to colour.colour = 'Amber'"
        ]
    },
    "33": {
        "question": "Provide the eye colours of the heroes whose skin colours are gold.",
        "GT_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Gold'",
        "actual_evidence": [
            "eye colours refers to eye_colour_id",
            "skin colours are gold refers to colour.colour = 'Gold' WHERE skin_colour_id = colour.id"
        ],
        "generic_evidence_automated": [
            "'eye colours of the heroes whose skin colours are gold' refers to colour.colour = 'Gold'",
            "'skin colours are gold' refers to colour.colour = 'Gold' WHERE skin_colour_id = colour.id"
        ],
        "generic_evidence": [
            "'eye colours of the heroes' refers to color.color",
            "'skin colours are gold' refers to colour.colour = 'Gold'"
        ]
    },
    "34": {
        "question": "How many percent of female heroes were published by Marvel Comics?",
        "GT_SQL": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'",
        "actual_evidence": [
            " female heroes refers to gender = 'Female'",
            " Marvel Comics refers to publisher_name = 'Marvel Comics'",
            "percent = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100)"
        ],
        "generic_evidence_automated": [
            "'percent of female heroes published by Marvel Comics' refers to CAST(COUNT(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(superhero.id)",
            "'female heroes' refers to COUNT(gender.gender = 'Female')",
            "'female heroes were published by Marvel Comics' refers to COUNT(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) * 100 / COUNT(superhero.id)"
        ],
        "generic_evidence": [
            " female heroes refers to gender.gender = 'Female'",
            "'published by Marvel Comics' refers to publisher.publisher_name = 'Marvel Comics'",
            "'percent of heroes were published by Marvel Comics' refers to CAST(COUNT(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(superhero.id)"
        ]
    },
    "35": {
        "question": "Find the average weight of the heroes who are aliens.",
        "GT_SQL": "SELECT CAST(SUM(T1.weight_kg) AS REAL) / COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
        "actual_evidence": [
            "average = AVG(weight_kg)",
            " aliens refers to race = 'Alien'"
        ],
        "generic_evidence_automated": [
            "'average weight of the heroes who are aliens' refers to CAST(SUM(superhero.weight_kg) AS REAL) / COUNT(superhero.id)",
            "'heroes who are aliens' refers to SUM(superhero.weight_kg) / COUNT(superhero.id) WHERE race.race = 'Alien'"
        ],
        "generic_evidence": [
            "'weight of the heroes' refers to superhero.weight_kg",
            "'heroes who are aliens' refers to race.race = 'Alien'"
        ]
    },
    "36": {
        "question": "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight.",
        "GT_SQL": "SELECT ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Charles Chandler' ) AS CALCULATE",
        "actual_evidence": [
            "difference = SUBTRACT(SUM(weight_kg WHERE full_name = 'Emil Blonsky'), SUM(weight_kg WHERE full_name = 'Charles Chandler'))",
            " Emil Blonsky is the full name of superhero",
            " Charles Chandler is the full name of superhero"
        ],
        "generic_evidence_automated": [
            "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight refers to ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Charles Chandler' )",
            "The difference between Emil Blonsky's weight and Charles Chandler's weight refers to (SELECT weight_kg FROM superhero WHERE full_name LIKE 'Emil Blonsky') - (SELECT weight_kg FROM superhero WHERE full_name LIKE 'Charles Chandler')",
            "'Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight' refers to ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Charles Chandler' )"
        ],
        "generic_evidence": [
            "Hero name Emil Blonsky refers to superhero.full_name = 'Emil Blonsky'",
            "Hero name Charles Chandler refers to superhero.full_name = 'Charles Chandler'",
            "'difference between Emil Blonsky's weight and Charles Chandler's weight' refers to ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Charles Chandler' )"
        ]
    },
    "37": {
        "question": "How many superheroes have a neutral alignment?",
        "GT_SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
        "actual_evidence": [
            "neutral alignment refers to alignment_id = 3"
        ],
        "generic_evidence_automated": [
            "'neutral alignment' refers to alignment.id = 3"
        ],
        "generic_evidence": [
            "'neutral alignment' refers to alignment.alignment = 'Neutral'"
        ]
    },
    "38": {
        "question": "State all of 3-D Man's attributes along with their values.",
        "GT_SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
        "actual_evidence": [
            "3-D Man is the superhero_name. attributes refers to attribute_name",
            "values refers to attribute_value"
        ],
        "generic_evidence_automated": [
            "'3-D Man's attributes along with their values' refers to T3.attribute_name, T2.attribute_value",
            "3-D Man's attributes along with their values refers to superhero.superhero_name = '3-D Man' and hero_attribute.hero_id = superhero.id and attribute.attribute_id = hero_attribute.attribute_id."
        ],
        "generic_evidence": [
            "'3-D Man' refers to is the superhero.superhero_name = '3-D Man'", 
            "'State all attributes' refers to hero_attribute.attribute_name",
            "'along with attribute values' refers to hero_attribute.attribute_value"
        ]
    },
    "39": {
        "question": "What is the publisher for Hawkman, Karate Kid and Speedy?",
        "GT_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
        "actual_evidence": [
            "publisher refers to publisher_name",
            " Hawkman refers to superhero_name = 'Hawkman'",
            " Karate Kid refers to superhero_name = 'Karate Kid'",
            " Speedy refers to superhero_name = 'Speedy'"
        ],
        "generic_evidence_automated": [
            "'publisher for Hawkman, Karate Kid and Speedy' refers to T2.publisher_name",
            "'publisher for Hawkman, Karate Kid and Speedy' refers to T2.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
            "'publisher for Hawkman, Karate Kid and Speedy' refers to publisher.publisher_name WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
            "'publisher for Hawkman, Karate Kid and Speedy' refers to T2.publisher_name WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')"
        ],
        "generic_evidence": [
            "'What is the publisher' refers to publisher.publisher_name",
            "'Superhero Hawkman' refers to superhero.superhero_name = 'Hawkman'",
            "'Superhero Karate Kid' refers to superhero.superhero_name = 'Karate Kid'",
            "'Superhero Speedy' refers to superhero.superhero_name = 'Speedy'"
        ]
    },
    "40": {
        "question": "How many superheroes didn't have any publisher?",
        "GT_SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.id = 1",
        "actual_evidence": [
            "didn't have any publisher refers to publisher.id = 1"
        ],
        "generic_evidence_automated": [
            "'superheroes didn't have any publisher' refers to COUNT(superhero.id) WHERE publisher.id = 1"
        ],
        "generic_evidence": [
            "'didn't have any publisher' refers to 'publisher.id = 1'"
        ]
    },
    "41": {
        "question": "Find the ratio between male superheroes and female superheroes.",
        "GT_SQL": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Male' THEN T1.id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id",
        "actual_evidence": [
            " male superheroes refers to gender_id = 1",
            " female superheroes refers to gender_id = 2",
            "ratio = DIVIDE(SUM(gender_id = 1) / SUM(gender_id = 2))"
        ],
        "generic_evidence_automated": [
            "'ratio between male superheroes and female superheroes' refers to CAST(COUNT(CASE WHEN gender.gender = 'Male' THEN superhero.id ELSE NULL END) AS REAL) / COUNT(CASE WHEN gender.gender = 'Female' THEN superhero.id ELSE NULL END)",
            "'male superheroes' refers to COUNT(CASE WHEN gender.id = 1 THEN superhero.id ELSE NULL END)",
            "'female superheroes' refers to COUNT(CASE WHEN gender.id = 2 THEN superhero.id ELSE NULL END)"
        ],
        "generic_evidence": [
            "'male superheroes' refers to gender.gender = 'Male'",
            "'female superheroes' refers to gender.gender = 'Female'",
            "'sum of all male superheroes' refers to COUNT(CASE WHEN gender.gender = 'Male' THEN superhero.id ELSE NULL END) AS REAL)"
        ]
    },
    "42": {
        "question": "Who is the tallest superhero?",
        "GT_SQL": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
        "actual_evidence": [
            "who refers to superhero_name",
            " tallest superhero refers to MAX(height_cm)"
        ],
        "generic_evidence_automated": [
            "'tallest superhero' refers to superhero_name",
            "'tallest superhero' refers to MAX(height_cm)"
        ],
        "generic_evidence": [
            "'superhero' refers to superhero.superhero_name",
            "'tallest superhero' refers to ORDER BY superhero.height_cm DESC LIMIT 1"
        ]
    },
    "43": {
        "question": "What is the power ID of cryokinesis?",
        "GT_SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
        "actual_evidence": [
            "power ID refers to superpower.id",
            " cryokinesis refers to power_name = 'cryokinesis'"
        ],
        "generic_evidence_automated": [
            "'power ID of cryokinesis' refers to id FROM superpower WHERE power_name = 'Cryokinesis'",
            "'power ID of cryokinesis' refers to id FROM superpower WHERE power_name = 'Cryokinesis'"
        ],
        "generic_evidence": [
            "'What is the power ID' refers to superpower.id",
            "'of cryokinesis' refers to superpower.power_name = 'Cryokinesis'"
        ]
    },
    "44": {
        "question": "Provide the name of superhero with superhero ID 294.",
        "GT_SQL": "SELECT superhero_name FROM superhero WHERE id = 294",
        "actual_evidence": [
            "name of superhero refers to superhero_name",
            " superhero ID 294 refers to superhero.id = 294"
        ],
        "generic_evidence_automated": [
            "Provide the name of superhero with superhero ID {100} refers to superhero_name",
            "Provide the name of superhero with superhero ID {100} refers to superhero.id = {100}"
        ],
        "generic_evidence": [
            "'Provide the name of superhero' refers to superhero.superhero_name",
            "with superhero ID {100} refers to superhero.id = 100"
        ]
    },
    "45": {
        "question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
        "GT_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
        "actual_evidence": [
            "eye colour refers to colour.colour where eye_colour_id = colour.id",
            " Karen Beecher-Duncan is the full name of superhero"
        ],
        "generic_evidence_automated": [
            "The eye colour of the superhero who has Karen Beecher-Duncan as their full name refers to colour.colour WHERE superhero.eye_colour_id = colour.id.",
            "The superhero who has Karen Beecher-Duncan as their full name refers to T1.full_name = 'Karen Beecher-Duncan'"
        ],
        "generic_evidence": [
            "'eye colour of the superhero' refers to colour.colour",
            "Karen Beecher-Duncan as their full name refers to superhero.full_name = 'Karen Beecher-Duncan'"
        ]
    },
    "46": {
        "question": "What is the superpowers of the superhero has Helen Parr as their full name?",
        "GT_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'",
        "actual_evidence": [
            "superpowers refers to power_name",
            " Helen Parr is the full name of superhero"
        ],
        "generic_evidence_automated": [
            "'superpowers of the superhero has Helen Parr as their full name' refers to superpower.power_name",
            "The superhero has Helen Parr as their full name refers to T1.full_name = 'Helen Parr'"
        ],
        "generic_evidence": [
            "'superpowers of the superhero' refers to superpower.power_name",
            "Helen Parr as their full name refers to superhero.full_name = 'Helen Parr'"
        ]
    },
    "47": {
        "question": "Find the race of the superhero who weighs 108kg and is 188cm tall.",
        "GT_SQL": "SELECT DISTINCT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188",
        "actual_evidence": [
            "weighs 108kg refers to weight_kg = 108",
            " 188cm tall refers to height_cm = 188"
        ],
        "generic_evidence_automated": [
            "The superhero who weighs {100}kg and is {100}cm tall refers to T1.weight_kg = {100} AND T1.height_cm = {100}",
            "The superhero who weighs {100}kg and is {100}cm tall refers to T1.weight_kg = {100} AND T1.height_cm = {100}"
        ],
        "generic_evidence": [
            "'who weighs {100} kg' refers to superhero.weight_kg = 100",
            "'who is {100} cm tall' refers to superhero.height_cm = 100",
            "The superhero who weighs {100} kg and is {100} cm tall refers to T1.weight_kg = {100} AND T1.height_cm = 100"
        ]
    },
    "48": {
        "question": "List the skin colour of the superheroes with 100 attribute value.",
        "GT_SQL": "SELECT DISTINCT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id WHERE T3.attribute_value = 100",
        "actual_evidence": [
            "skin colour refers to colour.colour where skin_colour_id = colour.id",
            " 100 attribute value refers to attribute_value = 100"
        ],
        "generic_evidence_automated": [
            "'skin colour of the superheroes with 100 attribute value' refers to colour.colour WHERE hero.skin_colour_id = colour.id AND hero_attribute.attribute_value = 100",
            "'100 attribute value' refers to T3.attribute_value = 100"
        ],
        "generic_evidence": [
            "'List the skin colour of the superheroes' refers to colour.colour",
            "'skin colour with 100 attribute value' refers to hero_attribute.attribute_value = 100"
        ]
    },
    "49": {
        "question": "Count the good female superheroes.",
        "GT_SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Good' AND T3.gender = 'Female'",
        "actual_evidence": [
            "good refers to alignment.id = 1",
            " female refers to gender.id = 2"
        ],
        "generic_evidence_automated": [
            "'good female superheroes' refers to COUNT(superhero.id) WHERE alignment.alignment = 'Good' AND gender.gender = 'Female'",
            "'good female superheroes' refers to COUNT(superhero.id) WHERE alignment.alignment = 'Good' AND gender.gender = 'Female'"
        ],
        "generic_evidence": [
            "'good superheroes' refers to alignment.alignment = 'Good'",
            "'female superheroes' refers to gender.gender = 'Female'"
        ]
    },
    "50": {
        "question": "Provide the names of superheroes with attribute value between 75 to 80.",
        "GT_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value BETWEEN 75 AND 80",
        "actual_evidence": [
            "names of superheroes refers to superhero_name",
            " attribute value between 75 to 80 refers to attribute_value BETWEEN 75 AND 80"
        ],
        "generic_evidence_automated": [
            "'names of superheroes with attribute value between {100} to {100}' refers to T1.superhero_name WHERE T2.attribute_value BETWEEN {100} AND {100}",
            "Names of superheroes with attribute value between 75 to 80 refers to T2.attribute_value BETWEEN 75 AND 80"
        ],
        "generic_evidence": [
            "'Provide the names of superheroes' refers to superhero.superhero_name",
            "attribute value between {100} to {100} refers to hero_attribute.attribute_value BETWEEN 100 AND 100"
        ]
    },
    "51": {
        "question": "How strong is the Hulk?",
        "GT_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength'",
        "actual_evidence": [
            " the Hulk refers to superhero_name = 'Hulk'",
            "how strong refers to attribute_value WHERE attribute_name = 'Strength'"
        ],
        "generic_evidence_automated": [
            "'how strong is the Hulk' refers to T2.attribute_value WHERE T1.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength'",
            "'How strong is the Hulk?' refers to T2.attribute_value WHERE T1.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength'"
        ],
        "generic_evidence": [
            "'the Hulk' refers to superhero.superhero_name = 'Hulk'",
            "'How strong' refers to attribute.attribute_name = 'Strength'"
        ]
    },
    "52": {
        "question": "List down Ajax's superpowers.",
        "GT_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
        "actual_evidence": [
            "Ajax refers to superhero_name = 'Ajax'",
            " superpowers refers to power_name"
        ],
        "generic_evidence_automated": [
            "'superpowers' refers to superpower.power_name for superhero.superhero_name = 'Ajax'",
            "'superpowers' refers to superpower.power_name"
        ],
        "generic_evidence": [
            "'Ajax' refers to superhero.superhero_name = 'Ajax'",
            "'superpowers' refers to superpower.power_name"
        ]
    },
    "53": {
        "question": "How many female superheroes are in Marvel Comics?",
        "GT_SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.gender = 'Female'",
        "actual_evidence": [
            "female refers to gender = 'Female'",
            " Marvel Comics refers to publisher_name = 'Marvel Comics'"
        ],
        "generic_evidence_automated": [
            "'female superheroes in Marvel Comics' refers to COUNT(superhero.id) WHERE publisher.publisher_name = 'Marvel Comics' AND gender.gender = 'Female'",
            "'female superheroes in Marvel Comics' refers to COUNT(superhero.id) WHERE publisher.publisher_name = 'Marvel Comics' AND gender.gender = 'Female'"
        ],
        "generic_evidence": [
            "female refers to gender.gender = 'Female'",
            "'female superheroes in Marvel Comics' refers to publisher.publisher_name = 'Marvel Comics'"
        ]
    },
    "54": {
        "question": "What is the average height of a non-human superhero in Dark Horse Comics?",
        "GT_SQL": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.race != 'Human'",
        "actual_evidence": [
            "average = AVG(height_cm)",
            " non-human superhero refers to race <> 'Human'",
            " Dark Horse Comics refers to publisher_name = 'Dark Horse Comics'"
        ],
        "generic_evidence_automated": [
            "'average height of a non-human superhero in Dark Horse Comics' refers to AVG(superhero.height_cm) WHERE publisher.publisher_name = 'Dark Horse Comics' AND race.race != 'Human'",
            "'non-human superhero' refers to T3.race != 'Human'",
            "The average height of a non-human superhero in Dark Horse Comics refers to AVG(superhero.height_cm) WHERE publisher.publisher_name = 'Dark Horse Comics' AND race.race != 'Human'"
        ],
        "generic_evidence": [
            "'height of a superhero' refers to superhero.height_cm",
            "'non-human superhero' refers to race.race != 'Human'",
            "Dark Horse Comics refers to publisher.publisher_name = 'Dark Horse Comics'"
        ]
    },
    "55": {
        "question": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.",
        "GT_SQL": "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
        "actual_evidence": [
            "DC refers to publisher_name = 'DC Comics'",
            " Marvel Comics refers to publisher_name = 'Marvel Comics'",
            " if SUM(publisher_name = 'DC Comics') > SUM(publisher_name = 'Marvel Comics'), it means DC Comics published more superheroes than Marvel Comics",
            " if SUM(publisher_name = 'Marvel Comics') > SUM(publisher_name = 'Marvel Comics'), it means Marvel Comics published more heroes than DC Comics",
            " difference = SUBTRACT(SUM(publisher_name = 'DC Comics'), SUM(publisher_name = 'Marvel Comics'))"
        ],
        "generic_evidence_automated": [
            "'Which publisher created more superheroes: DC or Marvel Comics' refers to SUM(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)",
            "'Which publisher created more superheroes: DC or Marvel Comics' refers to SUM(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)",
            "'Which publisher created more superheroes' refers to SUM(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)",
            "'Which publisher created more superheroes' refers to SUM(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)",
            "'created more superheroes: DC or Marvel Comics' refers to SUM(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)"
        ],
        "generic_evidence": [
            "'DC' refers to publisher.publisher_name = 'DC Comics'",
            "'Marvel Comics' refers to publisher.publisher_name = 'Marvel Comics'",
            "'number of superheroes published by DC Comics' refers to SUM(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END)",
            "'number of superheroes published by Marvel Comics' refers to SUM(CASE WHEN publisher.publisher_name = 'Marvel' THEN 1 ELSE 0 END)"
        ]
    },
    "56": {
        "question": "Identify the weakest attribute of the Black Panther.",
        "GT_SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1",
        "actual_evidence": [
            "weakest attribute refers to attribute_name WHERE MIN(attribute_value)",
            " Black Panther refers to superhero_name = 'Black Panther'"
        ],
        "generic_evidence_automated": [
            "'weakest attribute of the Black Panther' refers to attribute_name WHERE attribute_value = MIN(attribute_value)",
            "The weakest attribute of the Black Panther refers to ORDER BY hero_attribute.attribute_value ASC LIMIT 1."
        ],
        "generic_evidence": [
            "'Black Panther' refers to superhero.superhero_name = 'Black Panther'",
            "'Identify the weakest attribute' refers to ORDER BY hero_attribute.attribute_value ASC LIMIT 1"
        ]
    },
    "57": {
        "question": "What is Abomination's eye colour?",
        "GT_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'",
        "actual_evidence": [
            "Abomination refers to superhero_name = 'Abomination'",
            " eye colour refers to colour.colour where eye_colour_id = colour.id"
        ],
        "generic_evidence_automated": [
            "\"Abomination's eye colour\" refers to colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination'",
            "'Abomination's eye colour' refers to colour.colour where superhero.eye_colour_id = colour.id"
        ],
        "generic_evidence": [
            "'is Abomination's' refers to superhero.superhero_name = 'Abomination'",
            "'eye colour' refers to colour.colour"
        ]
    },
    "58": {
        "question": "Name the superhero, otherwise known as Charles Chandler.",
        "GT_SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
        "actual_evidence": [
            "name the superhero refers to superhero_name",
            " Charles Chandler is the full name of superhero"
        ],
        "generic_evidence_automated": [
            "the superhero, otherwise known as Charles Chandler refers to superhero_name",
            "The superhero, otherwise known as Charles Chandler, refers to superhero.full_name = 'Charles Chandler'."
        ],
        "generic_evidence": [
            "'Name the superhero' refers to superhero.superhero_name",
            "'known as Charles Chandler', refers to superhero.full_name = 'Charles Chandler'."
        ]
    },
    "59": {
        "question": "Give the hero ID of superhero with the lowest attribute value.",
        "GT_SQL": "SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute )",
        "actual_evidence": [
            "lowest attribute value refers to MIN(attribute_value)"
        ],
        "generic_evidence_automated": [
            "\"lowest attribute value\" refers to MIN(hero_attribute.attribute_value)"
        ],
        "generic_evidence": [
            "'lowest attribute value' refers to MIN(hero_attribute.attribute_value)"
        ]
    },
    "60": {
        "question": "Provide the full name of the superhero named Alien.",
        "GT_SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
        "actual_evidence": [
            "FALSE"
        ],
        "generic_evidence_automated": [
            "The full name of the superhero named Alien refers to full_name from superhero where superhero_name = 'Alien'."
        ],
        "generic_evidence": [
            "'superhero named Alien' refers to superhero.superhero_name = 'Alien'."
        ]
    },
    "61": {
        "question": "In superheroes with weight less than 100, list the full name of the superheroes with brown eyes.",
        "GT_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'",
        "actual_evidence": [
            "weight less than 100 refers to weight_kg < 100"
        ],
        "generic_evidence_automated": [
            "'full name of the superheroes with brown eyes' refers to superhero.full_name WHERE superhero.weight_kg < 100 AND colour.colour = 'Brown'"
        ],
        "generic_evidence": [
            "'weight less than {100}' refers to superhero.weight_kg < 100"
        ]
    },
    "62": {
        "question": "List the attribute value of the superhero named Aquababy.",
        "GT_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'",
        "actual_evidence": [
            "FALSE"
        ],
        "generic_evidence_automated": [
            "List the attribute value of the superhero named Aquababy = hero_attribute.attribute_value where superhero.superhero_name = 'Aquababy'"
        ],
        "generic_evidence": [
            "'superhero named Aquababy' refers to superhero.superhero_name = 'Aquababy'",
            "'List the attribute value' refers to hero_attribute.attribute_value"
        ]
    },
    "63": {
        "question": "List the hero ID of superheroes have intellegence as their power.",
        "GT_SQL": "SELECT T1.hero_id FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Intelligence'",
        "actual_evidence": [
            "hero ID refers to superhero.id",
            " have intelligence as their power refers to power_name = 'Intelligence'"
        ],
        "generic_evidence_automated": [
            "'hero ID of superheroes have intellegence as their power' refers to hero_power.hero_id WHERE superpower.power_name = 'Intelligence'",
            "'have intelligence as their power' refers to T2.power_name = 'Intelligence'"
        ],
        "generic_evidence": [
            "'hero ID of superheroes' refers to hero_power.hero_id",
            "'have intelligence as their power' refers to superpower.power_name = 'Intelligence'"
        ]
    }
}