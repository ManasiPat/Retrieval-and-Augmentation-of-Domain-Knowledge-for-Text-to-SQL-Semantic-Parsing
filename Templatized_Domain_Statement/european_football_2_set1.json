{
    "0": {
        "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
        "GT_SQL": "SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height < 180",
        "actual_evidence": [
            "percentage refers to DIVIDE(COUNT(height < 180 AND overall_rating > 70),COUNT(id)) * 100%"
        ],
        "generic_evidence_automated": [
            "'players that are under {100} cm who have an overall strength of more than {100}' refers to COUNT(Player.height < {100} AND Player_Attributes.overall_rating > {100}) * 100 / COUNT(Player.id)"
        ],
        "generic_evidence": [
            "'percentage of players that who have an overall strength of more than {100}' refers to CAST(COUNT(CASE WHEN Player_Attributes.overall_rating > 100 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(Player.id)"
        ]
    },
    "1": {
        "question": "What is the height of the tallest player? Indicate his name.",
        "GT_SQL": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
        "actual_evidence": [
            "tallest player refers to MAX(height)"
        ],
        "generic_evidence_automated": [
            "'height of the tallest player' refers to MAX(Player.height)"
        ],
        "generic_evidence": [
            "'height of the tallest player' refers to ORDER BY Player.height DESC LIMIT 1"
        ]
    },
    "2": {
        "question": "Which player has the highest overall rating? Indicate the player's api id.",
        "GT_SQL": "SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1",
        "actual_evidence": [
            "highest overall rating refers to MAX(overall_rating)"
        ],
        "generic_evidence_automated": [
            "'highest overall rating' refers to MAX(Player_Attributes.overall_rating)"
        ],
        "generic_evidence": [
            "'highest overall rating' refers to ORDER BY Player_Attributes.overall_rating DESC LIMIT 1"
        ]
    },
    "3": {
        "question": "Which home team had lost the fewest matches in the 2016 season?",
        "GT_SQL": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' AND t1.home_team_goal - t1.away_team_goal < 0 ORDER BY t1.home_team_goal - t1.away_team_goal DESC LIMIT 1",
        "actual_evidence": [
            "home team that had lost the fewest matches refers to MIN(SUBTRACT(home_team_goal, away_team_goal))",
            " 2016 season refers to season = '2015/2016'"
        ],
        "generic_evidence_automated": [
            "'home team that had lost the fewest matches' refers to MIN(home_team_goal - away_team_goal)",
            "'fewest matches' refers to ORDER BY t1.home_team_goal - t1.away_team_goal ASC."
        ],
        "generic_evidence": [
            "'home team that had lost the fewest matches' refers to Match.home_team_goal - Match.away_team_goal < 0 ORDER BY Match.home_team_goal - Match.away_team_goal DESC LIMIT 1",
            "'the 2016 season' refers to Match.season = '2015/2016'"
        ]
    },
    "4": {
        "question": "In Scotland Premier League, which away team won the most during the 2010 season?",
        "GT_SQL": "SELECT t2.away_team_api_id, t3.team_long_name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id INNER JOIN Team AS t3 ON t2.away_team_api_id = t3.team_api_id WHERE t1.name = 'ScotlAND Premier League' AND t2.season = '2009/2010' AND t2.away_team_goal - t2.home_team_goal > 0 ORDER BY t2.away_team_goal - t2.home_team_goal DESC LIMIT 1",
        "actual_evidence": [
            "Scotland Premier League refers to League.name = 'Scotland Premier League'",
            " away team refers to away_team_api_id",
            " away team that won the most refers to MAX(SUBTRACT(away_team_goal, home_team_goal)) > 0",
            " 2010 season refers to season = '2009/2010'"
        ],
        "generic_evidence_automated": [
            "'away team won the most during the 2010 season' refers to t2.away_team_api_id, t3.team_long_name WHERE t2.season = '2010' AND t2.away_team_goal - t2.home_team_goal > 0 ORDER BY t2.away_team_goal - t2.home_team_goal DESC LIMIT 1",
            "'away team won the most' refers to t2.away_team_api_id",
            "'away team won the most' refers to MAX(t2.away_team_goal - t2.home_team_goal) > 0",
            "'2010 season' refers to season = '2009/2010'"
        ],
        "generic_evidence": [
            "'Scotland Premier League' refers to League.name = 'Scotland Premier League'",
            "'which away team' refers to Match.away_team_api_id",
            "'away team won the most' refers to Match.away_team_goal - Match.home_team_goal > 0 ORDER BY Match.away_team_goal - Match.home_team_goal DESC LIMIT 1",
            "'2010 season' refers to Match.season = '2009/2010'"
        ]
    },
    "5": {
        "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed and whose tendency/ frequency of dribbling is little?",
        "GT_SQL": "SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlayDribbling ASC LIMIT 4",
        "actual_evidence": [
            "speed in which attacks are put together refers to buildUpPlaySpeed",
            "highest build up play speed refers to MAX(buildUpPlaySpeed)",
            " tendency/ frequency of dribbling is little refers to buildUpPlayDribblingClass = 'Little'"
        ],
        "generic_evidence_automated": [
            "The speed in which attacks are put together build Up Play Speed and whose tendency/frequency of dribbling is little refers to t1.buildUpPlaySpeed.",
            "The speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed and whose tendency/frequency of dribbling is little refers to SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlaySpeed DESC LIMIT 4.",
            "'attacks are put together of the top 4 teams with the highest build Up Play Speed and whose tendency/ frequency of dribbling is little' refers to SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.buildUpPlayDribblingClass = 'Little' ORDER BY t1.buildUpPlaySpeed DESC LIMIT 4"
        ],
        "generic_evidence": [
            "'The speed in which attacks are put together' refers to Team_Attributes.buildUpPlaySpeed.",
            "top 4 teams with the highest build up play speed refers to ORDER BY Team_Attributes.buildUpPlayDribbling ASC LIMIT 4",
            "'whose tendency/ frequency of dribbling is little' refers to Team_Attributes.buildUpPlayDribblingClass = 'Little'"
        ]
    },
    "6": {
        "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
        "GT_SQL": "SELECT DATETIME() - T2.birthday age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.`date`, 1, 10) BETWEEN '2013-01-01' AND '2015-12-31' AND t1.sprint_speed >= 97",
        "actual_evidence": [
            "players age at present = SUBTRACT((DATETIME(), birthday))",
            " sprint_speed > = 97",
            " between 2013 to 2015 refers to date > = '2013-01-01 00:00:00' AND date < = '2015-12-31 00:00:00'"
        ],
        "generic_evidence_automated": [
            "players age at present refers to DATETIME() - t2.birthday",
            "sprint speed of no less than 97 between 2013 to 2015 refers to t1.sprint_speed >= 97 AND SUBSTR(t1.`date`, 1, 10) BETWEEN '2013-01-01' AND '2015-12-31'",
            "'no less than {100}' refers to t1.sprint_speed >= {100}"
        ],
        "generic_evidence": [
            "'player's age at present' refers to DATETIME() - Player.birthday",
            "'sprint speed of no less than {100}' to Player_Attributes.sprint_speed >= 100",
            "'year between {100} to {100}' refers to SUBSTR(Player_Attributes.`date`, 1, 10) BETWEEN '100-01-01' AND '100-12-31'"
        ]
    },
    "7": {
        "question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.",
        "GT_SQL": "SELECT t2.name, COUNT(t1.id) FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id GROUP BY t2.name ORDER BY COUNT(t1.id) DESC LIMIT 1",
        "actual_evidence": [
            "name of the league refers to League.name",
            " league with highest matches of all time refers to MAX(COUNT(league_id))"
        ],
        "generic_evidence_automated": [
            "the league with the highest matches of all time and how many matches were played in the said league refers to t2.name, COUNT(Match.id)",
            "'league with highest matches of all time' refers to COUNT(Match.id)"
        ],
        "generic_evidence": [
            "'the name of the league' refers to League.name",
            "'league with highest matches of all time' refers to ORDER BY COUNT(Match.id) DESC LIMIT 1"
        ]
    },
    "8": {
        "question": "What is the average height of players born between 1990 and 1995?",
        "GT_SQL": "SELECT SUM(height) / COUNT(id) FROM Player WHERE SUBSTR(birthday, 1, 4) BETWEEN '1990' AND '1995'",
        "actual_evidence": [
            "average height = DIVIDE(SUM(height), COUNT(id))",
            " players born between 1990 and 1995 refers to birthday > = '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00'"
        ],
        "generic_evidence_automated": [
            "'average height of players born between 1990 and 1995' refers to SUM(Player.height) / COUNT(Player.id)",
            "'players born between 1990 and 1995' refers to SUBSTR(Player.birthday, 1, 4) BETWEEN '1990' AND '1995'"
        ],
        "generic_evidence": [
            "'average height of players' refers to SUM(Player.height) / COUNT(Player.id)",
            "'players born between the year {1000} and {1000}' refers to SUBSTR(Player.birthday, 1, 4) BETWEEN '1000' AND '1000'"
        ]
    },
    "9": {
        "question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.",
        "GT_SQL": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
        "actual_evidence": [
            "teams with more than 50 but less than 60 build-up play speed refers to buildUpPlaySpeed BETWEEN 51 AND 59"
        ],
        "generic_evidence_automated": [
            "'teams with more than {100} but less than {100} build-up play speed' refers to 'buildUpPlaySpeed BETWEEN 51 AND 59'"
        ],
        "generic_evidence": [
            "'teams with more than {100} but less than {100} build-up play speed' refers to Team_Attributes.buildUpPlaySpeed BETWEEN 100 AND 100"
        ]
    },
    "10": {
        "question": "List the long name of teams with above-average build-up play passing in 2012.",
        "GT_SQL": "SELECT DISTINCT t4.team_long_name FROM Team_Attributes AS t3 INNER JOIN Team AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.`date`, 1, 4) = '2013' AND t3.buildUpPlayPassing > ( SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE SUBSTR(t2.`date`, 1, 4) = '2013' )",
        "actual_evidence": [
            "long name of teams refers to team_long_name",
            " build-up play passing refers to buildUpPlayPassing",
            " above-average build-up play passing = DIVIDE(SUM(buildUpPlayPassing), COUNT(team_long_name) WHERE buildUpPlayPassing IS NOT NULL) < buildUpPlayPassing",
            " in 2012 refers to strftime('%Y', date) = '2012'"
        ],
        "generic_evidence_automated": [
            "List the long name of teams with above-average build-up play passing in 2012 refers to t4.team_long_name WHERE t3.buildUpPlayPassing > (SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE SUBSTR(t2.`date`, 1, 4) = '2013')",
            "List the long name of teams with above-average build-up play passing in 2012 refers to t3.team_long_name WHERE t3.buildUpPlayPassing > (SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE SUBSTR(t2.`date`, 1, 4) = '2013')",
            "'above-average build-up play passing' refers to t3.buildUpPlayPassing > ( SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE SUBSTR(t2.`date`, 1, 4) = '100' )",
            "'above-average build-up play passing in {100}' refers to t3.buildUpPlayPassing > ( SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE SUBSTR(t2.`date`, 1, 4) = '100' )"
        ],
        "generic_evidence": [
            "'List the long name of teams' to Team.team_long_name",
            "'build-up play passing' refers to Team_Attributes.buildUpPlayPassing ",
            "'average build-up play passing' refers to CAST(SUM(Team_Attributes.buildUpPlayPassing) AS REAL) / COUNT(Team.id)",
            "'in year {1000}' refers to SUBSTR(Team_Attributes.`date`, 1, 4) = '1000'"
        ]
    },
    "11": {
        "question": "List the top 5 leagues in ascending order of the number of goals made in all seasons combined.",
        "GT_SQL": "SELECT t1.name, SUM(t2.home_team_goal) + SUM(t2.away_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id GROUP BY t1.name ORDER BY SUM(t2.home_team_goal) + SUM(t2.away_team_goal) DESC LIMIT 5",
        "actual_evidence": [
            "number of goals made in all seasons combine = SUM(home_team_goal, away_team_goal)"
        ],
        "generic_evidence_automated": [
            "'top 5 leagues in ascending order of the number of goals made in all seasons combined' refers to SUM(Match.home_team_goal) + SUM(Match.away_team_goal)"
        ],
        "generic_evidence": [
            "'number of goals made in all seasons combined' refers to SUM(Match.home_team_goal) + SUM(Match.away_team_goal)"
        ]
    },
    "12": {
        "question": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing.",
        "GT_SQL": "SELECT t3.team_long_name FROM Team AS t3 INNER JOIN Team_Attributes AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.chanceCreationPassing < ( SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.`date`, 1, 4) = '2014' AND t2.`date` <= '2014-01-31 00:00:00' )",
        "actual_evidence": [
            "normal build-up play dribbling class refers to buildUpPlayDribblingClass = 'normal'",
            " in 2014 refers to date > = '2014-01-01 00:00:00' AND date < = '2014-01-31 00:00:00'",
            " names of the teams refers to team_long_name",
            " less than average chance creation passing = DIVIDE(SUM(chanceCreationPassing), COUNT(id)) > chanceCreationPassing"
        ],
        "generic_evidence_automated": [
            "'less than average chance creation passing' refers to t4.chanceCreationPassing < (SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.date, 1, 4) = '2014' AND t2.date <= '2014-01-31 00:00:00')",
            "'less than average chance creation passing' refers to t4.chanceCreationPassing < (SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.date, 1, 4) = '2014' AND t2.date <= '2014-01-31 00:00:00')",
            "'less than average chance creation passing' refers to t4.chanceCreationPassing < (SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.date, 1, 4) = '2014' AND t2.date <= '2014-01-31 00:00:00') ORDER BY t4.chanceCreationPassing DESC;",
            "'less than average chance creation passing' refers to t4.chanceCreationPassing < ( SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.date, 1, 4) = '2014' AND t2.date <= '2014-01-31 00:00:00' )"
        ],
        "generic_evidence": [
            "'normal build-up play dribbling class' refers to Team_Attributes.buildUpPlayDribblingClass = 'normal'",
            "'in year {1000}' refers to SUBSTR(Team_Attributes.`date`, 1, 4) = '1000' AND Team_Attributes.`date` <= '1000-01-31 00:00:00' )",
            "'List the names of the teams' refers to Team.team_long_name",
            "'less than average chance creation passing' refers to Team_Attributes.chanceCreationPassing < ( SELECT CAST(SUM(Team_Attributes.chanceCreationPassing) AS REAL) / COUNT(Team.id)"
        ]
    },
    "13": {
        "question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.",
        "GT_SQL": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.name HAVING (CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) - (CAST(SUM(t2.away_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) > 0",
        "actual_evidence": [
            "name of league refers to League.name",
            " average goals by the home team is higher than the away team = AVG(home_team_goal) > AVG(away_team_goal)"
        ],
        "generic_evidence_automated": [
            "'average goals by the home team is higher than the away team in the 2009/2010 season' refers to (CAST(SUM(Match.home_team_goal) AS REAL) / COUNT(DISTINCT Match.id)) - (CAST(SUM(Match.away_team_goal) AS REAL) / COUNT(DISTINCT Match.id)) > 0",
            "'average goals by the home team is higher than the away team' refers to (CAST(SUM(Match.home_team_goal) AS REAL) / COUNT(DISTINCT Match.id)) > (CAST(SUM(Match.away_team_goal) AS REAL) / COUNT(DISTINCT Match.id)"
        ],
        "generic_evidence": [
            "name of league refers to League.name",
            "'average goals by the home team is higher than the away team' refers to CAST(SUM(Match.home_team_goal) AS REAL) / COUNT(DISTINCT Match.id)) - (CAST(SUM(Match.away_team_goal) AS REAL) / COUNT(DISTINCT Match.id)) > 0"
        ]
    },
    "14": {
        "question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
        "GT_SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'",
        "actual_evidence": [
            "ADO Den Haag refers to team_long_name = 'ADO Den Haag'",
            " freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass"
        ],
        "generic_evidence_automated": [
            "'ADO Den Haag team freedom of movement in the 1st two thirds of the pitch' refers to DISTINCT Team_attributes.buildUpPlayPositioningClass",
            "'freedom of movement in the 1st two thirds of the pitch' refers to t2.buildUpPlayPositioningClass"
        ],
        "generic_evidence": [
            "ADO Den Haag refers to Team.team_long_name = 'ADO Den Haag'",
            "'freedom of movement in the 1st two thirds of the pitch' refers to Team_attributes.buildUpPlayPositioningClass"
        ]
    },
    "15": {
        "question": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?",
        "GT_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
        "actual_evidence": [
            "header's finishing rate refers to heading_accuracy",
            " on 18/09/2014 refers to date = '2014-09-18 00:00:00'"
        ],
        "generic_evidence_automated": [
            "\"football player Francois Affolter header's finishing rate on 18/09/2014\" refers to t2.heading_accuracy",
            "\"header's finishing rate\" refers to t2.heading_accuracy."
        ],
        "generic_evidence": [
            "'football player header's finishing rate' refers to Player_Attributes.heading_accuracy",
            "'on 100/100/100' refers to SUBSTR(Player_Attributes.`date`, 1, 10) = '100-100-100'"
        ]
    },
    "16": {
        "question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
        "GT_SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND SUBSTR(t2.`date`, 1, 4) = '2011'",
        "actual_evidence": [
            "in year 2011 refers to strftime('%Y', date) = '2011'"
        ],
        "generic_evidence_automated": [
            "'overall rating of the football player Gabriel Tamas in year {100}' refers to t2.overall_rating WHERE t1.player_name = 'Gabriel Tamas' AND SUBSTR(t2.date, 1, 4) = '100'"
        ],
        "generic_evidence": [
            "'overall rating of the football player' refers to Player_Attributes.overall_rating"
        ]
    },
    "17": {
        "question": "List all the football player with the highest potential score.",
        "GT_SQL": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.potential DESC LIMIT 1",
        "actual_evidence": [
            "potential score refers to potential",
            " highest potential score refers to MAX(potential)"
        ],
        "generic_evidence_automated": [
            "'all the football player with the highest potential score' refers to ORDER BY Player_Attributes.potential DESC LIMIT 1'",
            "'highest potential score' refers to MAX(Player_Attributes.potential)"
        ],
        "generic_evidence": [
            "'football player' refers to ORDER BY Player_Attributes.player_name",
            "'highest potential score' refers to ORDER BY Player_Attributes.potential DESC LIMIT 1"
        ]
    },
    "18": {
        "question": "List 10 football teams that has a chance creation passing class of Risky. Inidcate its short name only.",
        "GT_SQL": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Risky'",
        "actual_evidence": [
            "chance creation passing class refers to chanceCreationPassingClass",
            " chanceCreationPassingClass = 'Risky'",
            " short name refers to team_short_name"
        ],
        "generic_evidence_automated": [
            "'football teams that has a chance creation passing class of Risky' refers to t2.team_short_name WHERE t2.chanceCreationPassingClass = 'Risky'",
            "'chance creation passing class of Risky' refers to t2.chanceCreationPassingClass = 'Risky'",
            "'football teams that has a chance creation passing class of Risky' refers to DISTINCT Team.team_short_name WHERE Team_attributes.chanceCreationPassingClass = 'Risky'"
        ],
        "generic_evidence": [
            "'chance creation passing class of Risky' refers to t2.chanceCreationPassingClass = 'Risky'",
            "'football teams short name only' refers to DISTINCT Team.team_short_name"
        ]
    },
    "19": {
        "question": "What is the defensive work rate of the football player David Wilson\n?",
        "GT_SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
        "actual_evidence": [],
        "generic_evidence_automated": [],
        "generic_evidence": []
    },
    "20": {
        "question": "What is the name of the football league in the country of Netherlands?",
        "GT_SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands'",
        "actual_evidence": [
            "name of the football league refers to League.name"
        ],
        "generic_evidence_automated": [
            "'football league in the country of Netherlands' refers to League.name"
        ],
        "generic_evidence": [
            "'football league in the country' refers to League.name"
        ]
    },
    "21": {
        "question": "Who has the highest average finishing rate between the highest and shortest football player?",
        "GT_SQL": "SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1",
        "actual_evidence": [
            "finishing rate refers to finishing",
            " highest average finishing rate = MAX(AVG(finishing))",
            " highest football player refers to MAX(height)",
            " shortest football player refers to MIN(height)"
        ],
        "generic_evidence_automated": [
            "'highest average finishing rate' refers to AVG(T2.finishing)",
            "'highest average finishing rate' refers to MAX(AVG(Player_Attributes.finishing))",
            "'highest average finishing rate between the highest and shortest football player' refers to AVG(Player_Attributes.finishing) for the player with the maximum height and the player with the minimum height.",
            "'highest average finishing rate between the highest and shortest football player' refers to AVG(Player_Attributes.finishing) WHERE Player.height = (SELECT MAX(height) FROM Player) - AVG(Player_Attributes.finishing) WHERE Player.height = (SELECT MIN(height) FROM Player)"
        ],
        "generic_evidence": [
            "'finishing rate' refers to Player_Attributes.finishing",
            "'highest average finishing rate' refers to ORDER BY AVG(Player.finishing) DESC LIMIT 1",
            "'highest football player' refers to MAX(Player.height)",
            "'shortest football player' refers to MIN(Player.height)"
        ]
    },
    "22": {
        "question": "Please list player names which are higher than 180.",
        "GT_SQL": "SELECT player_name FROM Player WHERE height > 180",
        "actual_evidence": [
            "height>180"
        ],
        "generic_evidence_automated": [
            "'height>180' refers to 'Player.height > 180'"
        ],
        "generic_evidence": [
            "'higher than {100}' refers to Player.height > 100"
        ]
    },
    "23": {
        "question": "Which players had an overall rating of over 80 from 2008 to 2010? Please list player names.",
        "GT_SQL": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating > 80 AND SUBSTR(t2.`date`, 1, 4) BETWEEN '2008' AND '2010'",
        "actual_evidence": [
            "overall_rating > 80",
            " from 2008 to 2010 refers to strftime('%Y', date) BETWEEN '2008' AND '2010'"
        ],
        "generic_evidence_automated": [
            "'overall rating of over {100}' refers to t2.overall_rating > 80",
            "'overall rating of over 80 from {100}' refers to t2.overall_rating > 80 AND SUBSTR(t2.date, 1, 4) BETWEEN '100' AND '100'"
        ],
        "generic_evidence": [
            "'overall rating of over {100}' refers to Player_Attributes.overall_rating > 80",
            "'from year {1000} to {1000}' refers to SUBSTR(Player_Attributes.`date`, 1, 4) BETWEEN '1000' AND '1000'"
        ]
    },
    "24": {
        "question": "Which teams have build up play passing more than 70? Please list their short names.",
        "GT_SQL": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayPassing > 70",
        "actual_evidence": [
            "build up play passing refers to buildUpPlayPassing",
            " buildUpPlayPassing > 70",
            " short names refers to team_short_name"
        ],
        "generic_evidence_automated": [
            "'build up play passing more than {100}' refers to t2.buildUpPlayPassing > 70",
            "'build up play passing more than {100}' refers to t2.buildUpPlayPassing > {100}",
            "'build up play passing more than {100}' refers to t2.buildUpPlayPassing > 70"
        ],
        "generic_evidence": [
            "'build up play passing' refers to Team_Attributes.buildUpPlayPassing",
            "'build up play passing more than {100}' refers to Team_Attributes.buildUpPlayPassing > 100",
            "'list their short names' refers to Team.team_short_name"
        ]
    },
    "25": {
        "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
        "GT_SQL": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND SUBSTR(t2.`date`, 1, 4) BETWEEN '2010' AND '2015'",
        "actual_evidence": [
            "from 2010 to 2015 refers to strftime('%Y', date) BETWEEN '2010' AND '2015'",
            " height > 170"
        ],
        "generic_evidence_automated": [
            "'higher than {100}' refers to t1.height > 100",
            "'higher than {100}' refers to t1.height > 100"
        ],
        "generic_evidence": [
            "'From {1000} to {1000}' refers to SUBSTR(Player_Attributes.`date`, 1, 4) BETWEEN '1000' AND '1000'",
            "'who are higher than {100}' refers to Player.height > 100"
        ]
    },
    "26": {
        "question": "Which football player has the shortest height?",
        "GT_SQL": "SELECT player_name FROM player ORDER BY height ASC LIMIT 1",
        "actual_evidence": [
            "shortest height refers to MIN(height)"
        ],
        "generic_evidence_automated": [
            "'shortest height' refers to MIN(player.height)"
        ],
        "generic_evidence": [
            "'shortest height' refers to ORDER BY height ASC LIMIT 1"
        ]
    },
    "27": {
        "question": "Which country is the league Italy Serie A from?",
        "GT_SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Italy Serie A'",
        "actual_evidence": [
            "Italy Serie A from refers to League.name = 'Italy Serie A'"
        ],
        "generic_evidence_automated": [
            "'Italy Serie A from' refers to t2.name = 'Italy Serie A'"
        ],
        "generic_evidence": [
            "'Italy Serie A' refers to League.name = 'Italy Serie A'"
        ]
    },
    "28": {
        "question": "List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team.",
        "GT_SQL": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeed = 31 AND t2.buildUpPlayDribbling = 53 AND t2.buildUpPlayPassing = 32",
        "actual_evidence": [
            "build up play speed refers to buildUpPlaySpeed",
            " buildUpPlaySpeed = 31",
            " build up play dribbling refers to buildUpPlayDribbling",
            " buildUpPlayDribbling = 53",
            " build up play passing refers to buildUpPlayPassing",
            " buildUpPlayPassing = 32",
            " short name of the team refers to team_short_name"
        ],
        "generic_evidence_automated": [
            "The football team with build up play speed of 31, build up play dribbling of 53, and build up play passing of 32 refers to t2.buildUpPlaySpeed = 31 AND t2.buildUpPlayDribbling = 53 AND t2.buildUpPlayPassing = 32",
            "'build up play speed of {100}, build up plan dribbling of {100}, and build up play passing of {100}' refers to t2.buildUpPlaySpeed = {100} AND t2.buildUpPlayDribbling = {100} AND t2.buildUpPlayPassing = {100}",
            "The football team with a build up play speed of 31, build up play dribbling of 53, and build up play passing of 32 refers to t2.buildUpPlaySpeed = 31 AND t2.buildUpPlayDribbling = 53 AND t2.buildUpPlayPassing = 32",
            "'build up play speed of {100}, build up plan dribbling of {100}, and build up play passing of {100}' refers to t2.buildUpPlaySpeed = 100, t2.buildUpPlayDribbling = 100, and t2.buildUpPlayPassing = 100",
            "The football team with build up play speed of 31, build up play dribbling of 53, and build up play passing of 32 refers to t2.buildUpPlaySpeed = 31 AND t2.buildUpPlayDribbling = 53 AND t2.buildUpPlayPassing = 32",
            "'build up play passing of {100}' refers to t2.buildUpPlayPassing = {100}",
            "'build up play speed of {100}, build up plan dribbling of {100}, and build up play passing of {100}' refers to t2.buildUpPlaySpeed = 31 AND t2.buildUpPlayDribbling = 53 AND t2.buildUpPlayPassing = 32"
        ],
        "generic_evidence": [
            "'has a build up play speed of {100}' refers to Team_Attributes.buildUpPlaySpeed = 100",
            "'has a build up play dribbling of {100}' refers to Team_Attributes.buildUpPlayDribbling = 100",
            "'has a build up play passing of {100}' refers to Team_Attributes.buildUpPlayPassing = 100",
            "'indicate the short name of the team' refers to Team.team_short_name"
        ]
    },
    "29": {
        "question": "List all the short name of the football team that had a home team goal of 10?",
        "GT_SQL": "SELECT t1.team_short_name FROM Team AS t1 INNER JOIN Match AS t2 ON t1.team_api_id = t2.home_team_api_id WHERE t2.home_team_goal = 10",
        "actual_evidence": [
            "short name of the football team refers to team_short_name",
            " home team goal refers to home_team_goal",
            " home_team_goal = 10"
        ],
        "generic_evidence_automated": [
            "'home team goal of {100}' refers to t2.home_team_goal",
            "'home team goal of {100}' refers to t2.home_team_goal",
            "'home team goal of {100}' refers to t2.home_team_goal = {100}"
        ],
        "generic_evidence": [
            "'short name of the football team' refers to Team.team_short_name",
            "'team that had a home team goal of {100}' refers to Match.home_team_goal = 100"
        ]
    },
    "30": {
        "question": "What is the difference of the average ball control score between Aaron Meijers and Lukas Hinterseer\n?",
        "GT_SQL": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Aaron Meijers' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Meijers' THEN t2.id ELSE NULL END) AaronBallContr_sum , CAST(SUM(CASE WHEN t1.player_name = 'LukAS Hinterseer' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'LukAS Hinterseer' THEN t2.id ELSE NULL END) LukasBallCountr_sum FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
        "actual_evidence": [
            "difference of the average ball control = SUBTRACT(AVG(ball_control WHERE player_name = 'Aaron Meijers'),\u00a0AVG(ball_control WHERE player_name = 'Lukas Hinterseer'))"
        ],
        "generic_evidence_automated": [
            "'difference of the average ball control score between Aaron Meijers and Lukas Hinterseer' refers to (SUM(CASE WHEN Player.player_name = 'Aaron Meijers' THEN Player_Attributes.ball_control ELSE 0 END) / COUNT(CASE WHEN Player.player_name = 'Aaron Meijers' THEN Player_Attributes.id ELSE NULL END)) - (SUM(CASE WHEN Player.player_name = 'LukAS Hinterseer' THEN Player_Attributes.ball_control ELSE 0 END) / COUNT(CASE WHEN Player.player_name = 'LukAS Hinterseer' THEN Player_Attributes.id ELSE NULL END))"
        ],
        "generic_evidence": [
            "'average ball control score of Aaron Meijers' refers to CAST(SUM(CASE WHEN Player.player_name = 'Aaron Meijers' THEN Player_Attributes.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN Player.player_name = 'Aaron Meijers' THEN Player_Attributes.id ELSE NULL END)"
        ]
    },
    "31": {
        "question": "Which player is the tallest?",
        "GT_SQL": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
        "actual_evidence": [
            "tallest player refers to MAX(height)"
        ],
        "generic_evidence_automated": [
            "'tallest' refers to MAX(Player.height)"
        ],
        "generic_evidence": [
            "'tallest player' refers to ORDER BY Player.height DESC LIMIT 1"
        ]
    },
    "32": {
        "question": "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?",
        "GT_SQL": "SELECT COUNT(player_api_id) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'",
        "actual_evidence": [
            "preferred foot when attacking refers to preferred foot",
            " preferred_foot = 'left'",
            " players who would remain in his position when the team attacked refers to attacking_work_rate = 'low'"
        ],
        "generic_evidence_automated": [
            "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked refers to COUNT(Player_Attributes.player_api_id) WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'.",
            "'preferred foot was the left foot when attacking' refers to preferred_foot = 'left'",
            "'players who would remain in his position when the team attacked' refers to COUNT(Player_Attributes.player_api_id) WHERE Player_Attributes.preferred_foot = 'left' AND Player_Attributes.attacking_work_rate = 'low'"
        ],
        "generic_evidence": [
            "'preferred foot was the left foot when attacking' refers to Player_Attributes.preferred_foot = 'left'",
            "'players who would remain in his position when the team attacked' refers to Player_Attributes.attacking_work_rate = 'low'"
        ]
    },
    "33": {
        "question": "Please list the leagues from Germany.",
        "GT_SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Germany'",
        "actual_evidence": [
            "Germany refers to Country.name = 'Germany'"
        ],
        "generic_evidence_automated": [
            "'leagues from Germany' refers to League.name WHERE Country.name = 'Germany'"
        ],
        "generic_evidence": [
            "'list the leagues' refers to League.name",
            "'from Germany' refers to Country.name = 'Germany'"
        ]
    },
    "34": {
        "question": "Which of these players performs the best in crossing actions, Alexis, Ariel Borysiuk or Arouna Kone?",
        "GT_SQL": "SELECT t1.player_name, t2.crossing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1",
        "actual_evidence": [
            "player who perform best in crossing actions refers to MAX(crossing)"
        ],
        "generic_evidence_automated": [
            "'best in crossing actions' refers to MAX(Player_Attributes.crossing)"
        ],
        "generic_evidence": [
            "'best in crossing actions' refers to ORDER BY Player_Attributes.crossing DESC LIMIT 1"
        ]
    },
    "35": {
        "question": "Among the players whose height is over 180, how many of them have a volley score of over 70?",
        "GT_SQL": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 AND t2.volleys > 70",
        "actual_evidence": [
            "height > 180",
            " volley score refers to volleys",
            " volleys > 70"
        ],
        "generic_evidence_automated": [
            "'height is over {100}' refers to t1.height > {100}",
            "'volley score of over {100}' refers to t2.volleys > 100",
            "'volley score of over {100}' refers to t2.volleys > {100}"
        ],
        "generic_evidence": [
            "'height is over {100}' refers to Player.height > 100",
            "'volley score of over {100}' refers to Player_Attributes.volleys > 100"
        ]
    },
    "36": {
        "question": "How many matches in the 2008/2009 season were held in Belgium?",
        "GT_SQL": "SELECT COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Belgium' AND t2.season = '2008/2009'",
        "actual_evidence": [
            "Belgium refers to Country.name = 'Belgium'"
        ],
        "generic_evidence_automated": [
            "'Belgium' refers to Country.name = 'Belgium'"
        ],
        "generic_evidence": [
            "'held in Belgium' refers to Country.name = 'Belgium'"
        ]
    },
    "37": {
        "question": "What is the long passing score of the oldest player?",
        "GT_SQL": "SELECT t2.long_passing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday ASC LIMIT 1",
        "actual_evidence": [
            "long passing score refers to long_passing",
            " oldest player refers to oldest birthday"
        ],
        "generic_evidence_automated": [
            "'long passing score of the oldest player' refers to t2.long_passing",
            "'oldest player' refers to ORDER BY Player.birthday ASC LIMIT 1"
        ],
        "generic_evidence": [
            "'long passing score' refers to Player_Attributes.long_passing",
            "'oldest player' refers to ORDER BY Player.birthday ASC LIMIT 1"
        ]
    },
    "38": {
        "question": "Which league had the most matches in the 2008/2009 season?",
        "GT_SQL": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 1",
        "actual_evidence": [
            "league that had the most matches in the 2008/2009 season refers to MAX(league_id WHERE season = '2008/2009')"
        ],
        "generic_evidence_automated": [
            "'league had the most matches in the {100} season' refers to COUNT(Match.id) ORDER BY COUNT(Match.id) DESC LIMIT 1"
        ],
        "generic_evidence": [
            "'league had the most matches' refers to League.name ORDER BY COUNT(Match.id) DESC LIMIT 1"
        ]
    },
    "39": {
        "question": "What is Ajax's highest chance creation passing score and what is it classified as?",
        "GT_SQL": "SELECT t2.chanceCreationPassing FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
        "actual_evidence": [
            "Ajax's refers to team_long_name = 'Ajax'",
            " chance creation passing score refers to MAX(chanceCreationPassing)",
            " classified as chanceCreationPassingClass"
        ],
        "generic_evidence_automated": [
            "'Ajax's highest chance creation passing score' refers to t2.chanceCreationPassing",
            "'Ajax's highest chance creation passing score' refers to MAX(t2.chanceCreationPassing)",
            "'Ajax's highest chance creation passing score' refers to MAX(t2.chanceCreationPassing) and 'it classified as' refers to t2.chanceCreationPassingClass."
        ],
        "generic_evidence": [
            "'What is Ajax's' refers to Team_Attributes.team_long_name = 'Ajax'",
            "'highest chance creation passing score' refers to ORDER BY Team_Attributes.chanceCreationPassing DESC LIMIT 1",
            "'it classified as' refers to Team_Attributes.chanceCreationPassing"
        ]
    },
    "40": {
        "question": "Which foot is preferred by Abdou Diallo?",
        "GT_SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'",
        "actual_evidence": [
            "Abdou Diallo refers to player_name = 'Abdou Diallo'",
            " foot is preferred refers to preferred_foot"
        ],
        "generic_evidence_automated": [
            "'preferred foot by Abdou Diallo' refers to t2.preferred_foot WHERE t1.player_name = 'Abdou Diallo'",
            "'foot is preferred by Abdou Diallo' refers to t2.preferred_foot"
        ],
        "generic_evidence": [
            "'Abdou Diallo' refers to Player.player_name = 'Abdou Diallo'",
            "'Which foot is preferred' refers to Player_Attributes.preferred_foot"
        ]
    },
    "41": {
        "question": "What is the average number of goals made by Parma as the away team while playing in Italy?",
        "GT_SQL": "SELECT CAST(SUM(T1.away_team_goal) AS REAL) / COUNT(T1.id) FROM \"Match\" AS T1 INNER JOIN TEAM AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN Country AS T3 ON T1.country_id = T3.id WHERE T2.team_long_name = 'Parma' AND T3.name = 'Italy'",
        "actual_evidence": [
            "Parma refers to team_long_name = 'Parma'",
            " average number of goals refers to AVG(away_team_goal)"
        ],
        "generic_evidence_automated": [
            "'number of goals made by Parma as the away team while playing in Italy' refers to SUM(Match.away_team_goal) / COUNT(Match.id)",
            "'average number of goals made by Parma as the away team while playing in Italy' refers to CAST(SUM(Match.away_team_goal) AS REAL) / COUNT(Match.id)"
        ],
        "generic_evidence": [
            "'Parma as the away' refers to TEAM.team_long_name = 'Parma'",
            "'average number of goals made' refers to CAST(SUM(Match.away_team_goal) AS REAL) / COUNT(Match.id)"
        ]
    },
    "42": {
        "question": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.",
        "GT_SQL": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-06-23' AND t2.overall_rating = 77 ORDER BY t1.birthday ASC LIMIT 1",
        "actual_evidence": [
            "77 points overall rating refers to overall_rating = 77",
            " on 2016/6/23",
            " oldest refers to MIN(birthday)"
        ],
        "generic_evidence_automated": [
            "For the players who had a 77 points overall rating on {100}, who was the oldest? refers to ORDER BY Player.birthday ASC LIMIT 1",
            "'on {100}' refers to SUBSTR(Player_Attributes.date, 1, 10) = '100'",
            "'oldest' refers to MIN(Player.birthday)"
        ],
        "generic_evidence": [
            "'{100} points overall rating' refers to ORDER BY Player_Attributes.overall_rating = 100",
            "'on 100/100/100' refers to SUBSTR(Player_Attributes.`date`, 1, 10) = '100/100/100'",
            "'who was the oldest player' refers to Player.birthday ASC LIMIT 1"
        ]
    },
    "43": {
        "question": "What was the potiential for Francesco Parravicini on 2010/8/30?",
        "GT_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'",
        "actual_evidence": [
            "Francesco Parravicini refers to player_name = 'Francesco Parravicini'",
            " on 2010/8/30 refers to date = '2010-08-30 00:00:00'"
        ],
        "generic_evidence_automated": [
            "'potiential for Francesco Parravicini on 2010/8/30' refers to t2.potential WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'",
            "'potiential for Francesco Parravicini on 2010/8/30' refers to t2.potential WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'"
        ],
        "generic_evidence": [
            "'player name Francesco Parravicini' refers to Player.player_name = 'Francesco Parravicini'",
            "'What was the potiential' refers to Player_Attributes.potential",
            "'on 100/100/100' refers to SUBSTR(Player_Attributes.`date`, 1, 10) = '100/100/100'"
        ]
    },
    "44": {
        "question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
        "GT_SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC LIMIT 3 )ORDER BY date DESC LIMIT 1",
        "actual_evidence": [
            "Kevin Constant refers to player_name = 'Kevin Constant'",
            " highest crossing score refers to MAX(crossing)"
        ],
        "generic_evidence_automated": [
            "'Kevin Constant have his highest crossing score' refers to MAX(Player_Attributes.crossing)",
            "'highest crossing score' refers to MAX(Player_Attributes.crossing)"
        ],
        "generic_evidence": [
            "'player Kevin Constant' refers to Player.player_name = 'Kevin Constant'",
            "'his highest crossing score' refers to ORDER BY Player_Attributes.crossing DESC LIMIT 1"
        ]
    },
    "45": {
        "question": "How was the build up play dribbling class for \"LEI\" on 2015/9/10?",
        "GT_SQL": "SELECT t2.buildUpPlayDribblingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'LEI' AND SUBSTR(t2.`date`, 1, 10) = '2015-09-10'",
        "actual_evidence": [
            "\"LEI\" refers to team_short_name = 'LEI'",
            " on 2015/9/10 refers to\u00a0 date = '2015-09-10 00:00:00'"
        ],
        "generic_evidence_automated": [
            "build up play dribbling class for \"LEI\" on 2015/9/10 refers to t2.buildUpPlayDribblingClass",
            "'build up play dribbling class for \"LEI\" on 2015/9/10' refers to t2.buildUpPlayDribblingClass WHERE t1.team_short_name = 'LEI' AND t2.`date` = '2015-09-10 00:00:00'"
        ],
        "generic_evidence": [
            "'for team LEI' refers to Team.team_short_name = 'LEI'",
            "'build up play dribbling class' refers to Team_Attributes.buildUpPlayDribblingClass"
        ]
    },
    "46": {
        "question": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?",
        "GT_SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
        "actual_evidence": [
            "\"Hull City\" refers to team_long_name = 'Hull City'",
            " on 2010/2/22 refers to date = '2010-02-22 00:00:00'"
        ],
        "generic_evidence_automated": [
            "chance creation crossing class for \"Hull City\" on 2010/2/22 refers to t2.chanceCreationCrossingClass",
            "'chance creation crossing class for \"Hull City\" on {100}' refers to t2.chanceCreationCrossingClass"
        ],
        "generic_evidence": [
            "'Team Hull City' on 2010/2/22 refers to Team.team_long_name = 'Hull City'",
            "'chance creation crossing class' refers to Team_Attributes.chanceCreationCrossingClass"
        ]
    },
    "47": {
        "question": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?",
        "GT_SQL": "SELECT t2.chanceCreationShootingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hannover 96' AND SUBSTR(t2.`date`, 1, 10) = '2015-09-10'",
        "actual_evidence": [
            "\"Hannover 96\" refers to Team.team_long_name = 'Hannover 96'",
            " on 2015/9/10 refers to date = '2015-09-10 00:00:00'"
        ],
        "generic_evidence_automated": [
            "\"defence aggression class on 2015/9/10\" refers to t2.chanceCreationShootingClass WHERE t1.team_long_name = 'Hannover 96' AND SUBSTR(t2.`date`, 1, 10) = '2015-09-10'",
            "'defence aggression class on {100}' refers to t2.chanceCreationShootingClass"
        ],
        "generic_evidence": [
            "'For the team \"Hannover 96' refers to t2.chanceCreationShootingClass WHERE t1.team_long_name = 'Hannover 96' AND SUBSTR(t2.`date`, 1, 10) = '2015-09-10'",
            "'what was its defence aggression class' refers to Team_Attributes.chanceCreationShootingClass"
        ]
    },
    "48": {
        "question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?",
        "GT_SQL": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
        "actual_evidence": [
            "average overall rating refers to avg(overall_rating)",
            " Marko Arnautovic refers to player_name = 'Marko Arnautovic'",
            " from 2007/2/22 to 2016/4/21 refers to date BETWEEN '2007-02-22 00:00:00' and '2016-04-21 00:00:00'"
        ],
        "generic_evidence_automated": [
            "'average overall rating for {100}' refers to CAST(SUM(Player_Attributes.overall_rating) AS REAL) / COUNT(Player_Attributes.id)",
            "'overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21' refers to SUM(Player_Attributes.overall_rating) / COUNT(Player_Attributes.id)",
            "'from {100} to {100}' refers to SUBSTR(Player_Attributes.date, 1, 10) BETWEEN '100' AND '100'"
        ],
        "generic_evidence": [
            "'average overall rating' refers to CAST(SUM(Player_Attributes.overall_rating) AS REAL) / COUNT(Player_Attributes.id)",
            "'for player Marko Arnautovic' refers to Player.player_name = 'Marko Arnautovic'",
            "'from {100/100/100} to {100/100/100}' refers to SUBSTR(Player_Attributes.date, 1, 10) BETWEEN '100-100-100' AND '100-100-100'"
        ]
    },
    "49": {
        "question": "What are the player api id of 10 heaviest players?",
        "GT_SQL": "SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10",
        "actual_evidence": [
            "heaviest refers to MAX(weight)"
        ],
        "generic_evidence_automated": [
            "'heaviest players' refers to ORDER BY Player.weight DESC"
        ],
        "generic_evidence": [
            "'{100} heaviest players' refers to ORDER BY Player.weight DESC LIMIT 100"
        ]
    },
    "50": {
        "question": "List down the name of players who are 35 years old and above.",
        "GT_SQL": "SELECT player_name FROM Player WHERE CAST((JULIANDAY('now') - JULIANDAY(birthday)) AS REAL) / 365 >= 35",
        "actual_evidence": [
            "35 years old and above refers to datetime(CURRENT_TIMESTAMP,'localtime') - datetime(birthday) > 34"
        ],
        "generic_evidence_automated": [
            "'35 years old and above' refers to CAST((JULIANDAY('now') - JULIANDAY(Player.birthday)) AS REAL) / 365 >= 35"
        ],
        "generic_evidence": [
            "'{100} years old and above' refers to CAST((JULIANDAY('now') - JULIANDAY(Player.birthday)) AS REAL) / 365 >= 100"
        ]
    },
    "51": {
        "question": "How many home team goal have been scored by Aaron Lennon?",
        "GT_SQL": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_9 WHERE t1.player_name = 'Aaron Lennon'",
        "actual_evidence": [
            "Aaron Lennon refers to player_name = 'Aaron Lennon'"
        ],
        "generic_evidence_automated": [
            "'home team goal have been scored by Aaron Lennon' refers to SUM(match.home_team_goal) WHERE player.player_name = 'Aaron Lennon'"
        ],
        "generic_evidence": [
            "'home team goal' refers to match.home_team_goal"
        ]
    },
    "52": {
        "question": "Sum up the away team goal scored by both Daan Smith and Filipe Ferreira.",
        "GT_SQL": "SELECT SUM(t2.away_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_5 WHERE t1.player_name IN ('Daan Smith', 'Filipe Ferreira')",
        "actual_evidence": [
            "Daan Smith refers to player_name = 'Daan Smith'",
            " Filipe Ferreira refers to player_name = 'Filipe Ferreira'"
        ],
        "generic_evidence_automated": [
            "Sum up the away team goal scored by both Daan Smith and Filipe Ferreira refers to SUM(match.away_team_goal) WHERE Player.player_name IN ('Daan Smith', 'Filipe Ferreira')",
            "Sum up the away team goal scored by both Daan Smith and Filipe Ferreira refers to SUM(match.away_team_goal) WHERE Player.player_name IN ('Daan Smith', 'Filipe Ferreira')"
        ],
        "generic_evidence": [
            "'player Daan Smith' refers to t1.player_name = 'Daan Smith'",
            "'away team goal scored' refers to match.away_team_goal"
        ]
    },
    "53": {
        "question": "State 10 names of the strongest players.",
        "GT_SQL": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 10",
        "actual_evidence": [
            "strongest players refers to MAX(overall_rating)"
        ],
        "generic_evidence_automated": [
            "'strongest players' refers to t2.overall_rating"
        ],
        "generic_evidence": [
            "'strongest players' refers to Player_Attributes.overall_rating DESC LIMIT 1"
        ]
    },
    "54": {
        "question": "State the name of players who came from Belgium.",
        "GT_SQL": "SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'",
        "actual_evidence": [
            "name of players refers to player_name",
            " Belgium is name of country"
        ],
        "generic_evidence_automated": [
            "'players who came from Belgium' refers to t3.player_name",
            "'players who came from Belgium' refers to t3.player_name"
        ],
        "generic_evidence": [
            "'name of players' refers to Player.player_name",
            "'who came from Belgium' refers to Country.name = 'Belgium'"
        ]
    },
    "55": {
        "question": "Which country's players have the heaviest average weights?",
        "GT_SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id GROUP BY t1.name ORDER BY SUM(t3.weight) / COUNT(t3.id) DESC LIMIT 1",
        "actual_evidence": [
            "heaviest average weights refers to MAX(AVG(weight))"
        ],
        "generic_evidence_automated": [
            "'heaviest average weights' refers to SUM(t3.weight) / COUNT(t3.id)"
        ],
        "generic_evidence": [
            "'average weights' refers to SUM(Player.weight) / COUNT(Player.id)"
        ]
    },
    "56": {
        "question": "List down the long name for slow speed class team.",
        "GT_SQL": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Slow'",
        "actual_evidence": [
            "slow speed class refers to buildUpPlaySpeedClass = 'Slow'",
            " long name refers to team_long_name"
        ],
        "generic_evidence_automated": [
            "'slow speed class' refers to buildUpPlaySpeedClass = 'Slow'",
            "'slow speed class team' refers to Team.team_long_name"
        ],
        "generic_evidence": [
            "'slow speed class team' refers to Team_Attributes.buildUpPlaySpeedClass = 'Slow'",
            "'the long name' refers to Team.team_long_name"
        ]
    },
    "57": {
        "question": "What is the average heights of Italy players?",
        "GT_SQL": "SELECT CAST(SUM(T1.height) AS REAL) / COUNT(T1.id) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.ID WHERE T3.NAME = 'Italy'",
        "actual_evidence": [
            "average heights refers to Avg(height)",
            " Italy is name of country"
        ],
        "generic_evidence_automated": [
            "'average heights of Italy players' refers to CAST(SUM(Player.height) AS REAL) / COUNT(Player.id)",
            "'average heights of Italy players' refers to CAST(SUM(Player.height) AS REAL) / COUNT(Player.id) WHERE Country.NAME = 'Italy'"
        ],
        "generic_evidence": [
            "'average heights' refers to CAST(SUM(Player.height) AS REAL) / COUNT(Player.id)",
            "'Italy players' refers to Country.NAME = 'Italy'"
        ]
    },
    "58": {
        "question": "What percentage of players have a strength and stamina score of more than 80?",
        "GT_SQL": "SELECT CAST(COUNT(CASE WHEN strength > 80 AND stamina > 80 THEN id ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM Player_Attributes t",
        "actual_evidence": [
            "strength and stamina score of more than 80 refers to stamina > 80 and strength > 80"
        ],
        "generic_evidence_automated": [
            "'players have a strength and stamina score of more than {100}' refers to COUNT(CASE WHEN Player_Attributes.strength > {100} AND Player_Attributes.stamina > {100} THEN id ELSE NULL END) * 100 / COUNT(id)"
        ],
        "generic_evidence": [
            "'strength score of more than {100}' refers to Player_Attributes.strength > 100",
            "'stamina score of more than {100}' refers to Player_Attributes.stamina > 100"
        ]
    },
    "59": {
        "question": "What are Alexis Blin's sprint speed, agility, and acceleration scores?",
        "GT_SQL": "SELECT acceleration, sprint_speed, agility FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin' )",
        "actual_evidence": [
            "Alexis Blin's refers to player_name = 'Alexis Blin'"
        ],
        "generic_evidence_automated": [
            "Alexis Blin's sprint speed, agility, and acceleration scores refers to acceleration, sprint_speed, agility FROM Player_Attributes WHERE player_name = 'Alexis Blin'"
        ],
        "generic_evidence": [
            "'sprint speed' refers to Player_Attributes.sprint_speed",
            "'agility' refers to Player_Attributes.agility",
            "'acceleration score' refers to Player_Attributes.acceleration"
        ]
    },
    "60": {
        "question": "In the 2015\u20132016 season, how many games were played in the Italian Serie A league?",
        "GT_SQL": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Italy Serie A' AND t2.season = '2015/2016'",
        "actual_evidence": [
            "In the 2015\u20132016 season refers to season = '2015/2016'"
        ],
        "generic_evidence_automated": [
            "'In the {100} season' refers to season = '{100}'"
        ],
        "generic_evidence": [
            "'In the 2015/2016 season' refers to season = '2015/2016'"
        ]
    },
    "61": {
        "question": "Please state the finishing rate and curve score of the player who has the heaviest weight.",
        "GT_SQL": "SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1 ) LIMIT 1",
        "actual_evidence": [
            "heaviest weight refers to MAX(weight)"
        ],
        "generic_evidence_automated": [
            "'heaviest weight' refers to MAX(weight)"
        ],
        "generic_evidence": [
            "'finishing rate of the player' refers to Player_Attributes.finishing",
            "'curve score of the player' refers to Player_Attributes.curve",
            "'player who has the heaviest weight' refers to ORDER BY Player_Attributes.weight DESC LIMIT 1"
        ]
    },
    "62": {
        "question": "Please provide the full name of the away team that scored the most goals.",
        "GT_SQL": "SELECT t2.team_long_name FROM Match AS t1 INNER JOIN Team AS t2 ON t1.away_team_api_id = t2.team_api_id ORDER BY t1.away_team_goal DESC LIMIT 1",
        "actual_evidence": [
            "full name refers to team_long_name",
            " away team refers to away_team_api_id",
            " scored the most goals refers to MAX(COUNT(away_team_goal))"
        ],
        "generic_evidence_automated": [
            "the full name of the away team that scored the most goals refers to Team.team_long_name",
            "The full name of the away team that scored the most goals refers to t2.team_long_name.",
            "'scored the most goals' refers to ORDER BY Match.away_team_goal DESC LIMIT 1"
        ],
        "generic_evidence": [
            "'full name' refers to Team.team_long_name",
            "'the away team' refers to Match.away_team_api_id",
            "'the away team that scored the most goals' refers to ORDER BY Match.away_team_goal DESC LIMIT 1"
        ]
    },
    "63": {
        "question": "Please name one player whose overall strength is the greatest.",
        "GT_SQL": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes)",
        "actual_evidence": [
            "overall strength is the greatest refers to MAX(overall_rating)"
        ],
        "generic_evidence_automated": [
            "'overall strength is the greatest' refers to MAX(Player_Attributes.overall_rating)"
        ],
        "generic_evidence": [
            "'overall strength is the greatest' refers to MAX(Player_Attributes.overall_rating)"
        ]
    }
}